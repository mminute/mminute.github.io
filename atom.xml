<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A PlanarFe Adventure]]></title>
  <link href="http://mminute.github.io/atom.xml" rel="self"/>
  <link href="http://mminute.github.io/"/>
  <updated>2015-11-19T21:03:31-05:00</updated>
  <id>http://mminute.github.io/</id>
  <author>
    <name><![CDATA[Mason Jennings]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tap, Inject, and Each_With_Object]]></title>
    <link href="http://mminute.github.io/blog/2015/11/10/tap/"/>
    <updated>2015-11-10T11:54:16-05:00</updated>
    <id>http://mminute.github.io/blog/2015/11/10/tap</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/beerTaps.jpg" width="600" alt="http://live2eat.typepad.com/.a/6a014e8968623c970d017d42a40c16970c-pi"></p>

<p>I realized the other day that, while I&rsquo;ve been using Object#tap, Enumerator#each#with_object, and Enumerable#each_with_object for some time now, I wasn&rsquo;t completely clear on the difference between these methods or how best to employ them.  Mostly I just threw in Object#tap wherever I saw sandwich code and called it a day.</p>

<p>Time for a&hellip;</p>

<p><img src="http://mminute.github.io/images/DeepDive.jpg" width="600" alt="http://40.media.tumblr.com/33dded80b572fc3f9733ba5616b7e6ed/tumblr_mv4yonGTMV1rh0tlxo2_1280.jpg"></p>

<!--more-->


<p>A good place to start is <a href="http://ruby-doc.org/core-2.2.3/">Ruby Docs</a> for the method definitions:</p>

<blockquote>
  <a href="#tap">Object#tap</a> - <br>
    Yields self to the block, and then returns self. The primary purpose of this method is to “tap into” a method chain, in order to perform operations on intermediate results within the chain.
  <br>
  <br>
  <a href="#each_with_object">Enumerable#each_with_object</a> - <br>
    Iterates the given block for each element with an arbitrary object given, and returns the initially given object. <br>

    If no block is given, returns an enumerator.
  <br>
  <br>
  <a href="#inject">Enumerable#inject</a> - <br>
    Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator. <br>
    <br>
    If you specify a block, then for each element in enum the block is passed an accumulator value (memo) and the element. If you specify a symbol instead, then each element in the collection will be passed to the named method of memo. In either case, the result becomes the new value for memo. At the end of the iteration, the final value of memo is the return value for the method. <br>
    <br>
    If you do not explicitly specify an initial value for memo, then the first element of collection is used as the initial value of memo.
</blockquote>




<div id="tap"></div>


<h2>Object#tap</h2>

<p>I&rsquo;ll start with this one, mostly because it&rsquo;s the one that I have thrown around the most with the least amount of thought.  So far I&rsquo;ve mostly just used it for refactors like this: (cue extremely contrived example&hellip;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Human</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:age</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_drive?</span>
</span><span class='line'>      <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">16</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Sandwich code</span>
</span><span class='line'>  <span class="n">mason</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">mason</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mason</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># tapped</span>
</span><span class='line'>  <span class="n">mason</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="n">person</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a personal note, I&rsquo;m feeling conflicted about this method lately.  I like that it eliminates the need to explicitly return the &lsquo;Human&rsquo; object.  I like it aesthetically, it reads cleanly to my eye, but sometimes it feels a bit like using it just to use it.  Maybe even a bit trivial.  Not everyone instantly recognizes it and it actually seems to obfuscate your intended return value a bit.  Anyway&hellip;</p>

<p>While the above implementation certainly works, reading the documentation it isn&rsquo;t quite the use for which the method was designed.</p>

<blockquote>
"The primary purpose of this method is to “tap into” a method chain."
</blockquote>


<p>It may clean up the code but maybe the <code>#tap</code> method is better reserved for cases where returning the origional object provides a bit more function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">mason</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">mason</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mason</span><span class="o">.</span><span class="n">can_drive?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># or</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mason</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="n">person</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">can_drive?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the return value of <code>person.age = rand(1..100)</code> is an integer and <code>#can_drive?</code> is a method on an instance of the class <code>Human</code>. Without <code>#tap</code> you would not be able to chain these methods together.  This feels like a better use case to me; the <code>#tap</code> method serves a more significant purpose, allowing you to assign a variable name, an age, and call an instance method on a class all in one shot.</p>

<div id="each_with_object"></div>


<h2>Enumerable#each_with_object</h2>

<p>So this one is a bit different but kind of in the same vein. It&rsquo;s in the Enumerable module so we know that <code>#each_with_object</code> is called on some kind of collection, like an array or a hash, and iterates through the items in the collection, just like the plain-old <code>#each</code> method.  What puts <code>#each_with_object</code> in the family of <code>#tap</code> is the <code>...with_object</code> bit. It allows us to pass in an arbitrary object and return that object from the method. Where <code>#tap</code> is called on the object you wish to return, <code>#each_with_object</code> takes the return object as an arguement.  For me the inportance is the concept.  <strong>It couples the iteration and the return.</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">my_strings</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;destiny&#39;</span><span class="p">,</span> <span class="s1">&#39;how&#39;</span><span class="p">,</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="s1">&#39;the&#39;</span><span class="p">,</span> <span class="s1">&#39;wife&#39;</span><span class="p">,</span> <span class="s1">&#39;and&#39;</span><span class="p">,</span> <span class="s1">&#39;kids&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># with tap</span>
</span><span class='line'>  <span class="o">[].</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">collector</span><span class="o">|</span> <span class="n">my_strings</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">collector</span> <span class="o">&lt;&lt;</span> <span class="n">word</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># or for better readability</span>
</span><span class='line'>  <span class="o">[].</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">collector</span><span class="o">|</span>
</span><span class='line'>    <span class="n">my_strings</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>      <span class="n">collector</span> <span class="o">&lt;&lt;</span> <span class="n">word</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># with each_with_object</span>
</span><span class='line'>  <span class="n">my_strings</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="p">,</span> <span class="n">collector</span><span class="o">|</span> <span class="n">collector</span> <span class="o">&lt;&lt;</span> <span class="n">word</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, rather than iterating through the collection with <code>#tap</code>&rsquo;s block we implicitly iterate through the collection.  I&rsquo;ve seen <code>#tap</code> used this way but to my eye <code>#each_with_object</code> more clearly and succinctly communicates what you seek to accomplish.  If <a href="#performance">performance is critical</a>, go ahead and use <code>#tap</code> this way, otherwise maybe <code>#each_with_object</code> might help out those developers coming behind you.</p>

<p>Alternately <code>Enumberable.each.with_object</code> functions exactly the same as <code>#each_with_object</code> and might even be more clear in its' link with iterating over a collection.</p>

<div id="inject"></div>


<h2>Enumerable#inject aka Enumerable#Reduce</h2>

<p>This is the odd-ball of the group.  The idea is that you have an object (noted as the <code>memo_object</code> in the documentation) to which some sort of changes are applied based on the objects over which you are iterating.  The simplest examples is addition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">inject</span> <span class="p">{</span> <span class="o">|</span><span class="n">memo_object</span><span class="p">,</span> <span class="n">number</span> <span class="o">|</span> <span class="n">memo_object</span> <span class="o">=</span> <span class="n">memo_object</span> <span class="o">+</span> <span class="n">number</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># =&gt; 15</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>#inject</code> comes in two flavors, taking a symbol or a block, and each of those flavors can also optionally take an initial value as an arguement.  If no initial value is passed, the first object in the collection becomes the initial value by default.</p>

<h3>Passed a symbol:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; 20</span>
</span><span class='line'>  <span class="c1"># or equivalently -&gt; [2,4,6,8].reduce(:+)</span>
</span><span class='line'>  <span class="c1"># Takes 2 as the initial value,</span>
</span><span class='line'>  <span class="c1"># add 4 to it, returns 6 to the next</span>
</span><span class='line'>  <span class="c1"># iteration. Takes the 6 returned to the</span>
</span><span class='line'>  <span class="c1"># second iteration, adds 6 to it, returns</span>
</span><span class='line'>  <span class="c1"># 12 to the next iteration...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Passed a symbol and an initial value</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; 30</span>
</span><span class='line'>  <span class="c1"># Takes 10 as the initial value,</span>
</span><span class='line'>  <span class="c1"># adds 2 to it, and returns 12 to</span>
</span><span class='line'>  <span class="c1"># the next iteration...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Passed a block:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">my_strings</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;hello &#39;</span><span class="p">,</span> <span class="s1">&#39;destiny &#39;</span><span class="p">,</span> <span class="s1">&#39;how &#39;</span><span class="p">,</span> <span class="s1">&#39;are &#39;</span><span class="p">,</span> <span class="s1">&#39;the &#39;</span><span class="p">,</span> <span class="s1">&#39;wife &#39;</span><span class="p">,</span> <span class="s1">&#39;and &#39;</span><span class="p">,</span> <span class="s1">&#39;kids?&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Passed a block</span>
</span><span class='line'>  <span class="n">my_strings</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span> <span class="o">|</span><span class="n">sentence</span><span class="p">,</span> <span class="n">word</span><span class="o">|</span> <span class="n">sentence</span> <span class="o">+</span> <span class="n">word</span><span class="o">.</span><span class="n">capitalize</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># =&gt; &quot;hello Destiny How Are The Wife And Kids?&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Passed a block and an initial value</span>
</span><span class='line'>  <span class="n">my_strings</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="s2">&quot;Oh, &quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">sentence</span><span class="p">,</span> <span class="n">word</span><span class="o">|</span> <span class="n">sentence</span> <span class="o">+</span> <span class="n">word</span><span class="o">.</span><span class="n">capitalize</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># =&gt; &quot;Oh, Hello Destiny How Are The Wife And Kids?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I accidentally came up with a better example than I thought for passing a block without an initial value since it demonstrates that nothing is done to the first object in the collection.  It is passed straight to the block execution for the next object in the collection as the memo object.</p>

<p>There&rsquo;s one more layer to <code>#inject</code>.  <strong>The return value of the method execution is the return value of the last execution of the block</strong> , not the memo object.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">number</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span> <span class="o">!=</span> <span class="mi">5</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>if number != 5; sum +=5; end</code> returns nil when <code>number == 5</code>, the last object in the collection, the return value of the entire method is nil.  You could do something kinda ugly like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">number</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span> <span class="o">!=</span> <span class="mi">5</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">sum</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># =&gt; 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>but at that point maybe you&rsquo;re better off just using a different method like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span> <span class="o">!=</span> <span class="mi">5</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sum</span>
</span><span class='line'>  <span class="c1"># =&gt; 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>At least it&rsquo;s a bit more obvious at first glance what you want back.</p>

<h2>The Inspiration</h2>

<p>Here&rsquo;s the cool bit that got me thinking about these method, specifically #inject.  I ran into a problem where I had a hash and I needed to return a hash with mutations applied to both the keys and values in the origional hash.  Changing values is easy.  Changing keys takes a bit more work.</p>

<p>You could update the keys in place by iterate through the keys, create new mutated key and value pairs, and delete the old pair:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">markup</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'>  <span class="n">toys</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;rubber_ducky&quot;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;slinky&quot;</span>       <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;lawn_dart&quot;</span>    <span class="o">=&gt;</span> <span class="mi">7</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>  <span class="n">toys</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>    <span class="n">toys</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">toys</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">*</span> <span class="n">markup</span>
</span><span class='line'>    <span class="n">toys</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">toys</span>
</span><span class='line'>  <span class="c1"># =&gt; {:RUBBER_DUCKY=&gt;5.5, :SLINKY=&gt;3.30..., :LAWN_DART=&gt;7.70...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could use the Enumerable#map method to pass arrays of key value pairs to the Hash literal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">new_prices</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">toys</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">price</span><span class="o">|</span>
</span><span class='line'>                      <span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">price</span> <span class="o">*</span> <span class="n">markup</span><span class="o">]</span>
</span><span class='line'>                     <span class="k">end</span>
</span><span class='line'>                    <span class="o">]</span>
</span><span class='line'>  <span class="c1"># =&gt; {:RUBBER_DUCKY=&gt;5.5, :SLINKY=&gt;3.30..., :LAWN_DART=&gt;7.70...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you could use the inject method to pass around a hash and merge new key-value pairs into it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">toys</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">newly_priced</span><span class="p">,</span> <span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">price</span><span class="p">)</span><span class="o">|</span>
</span><span class='line'>    <span class="n">newly_priced</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">=&gt;</span> <span class="n">price</span> <span class="o">*</span> <span class="n">markup</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># =&gt; {:RUBBER_DUCKY=&gt;5.5, :SLINKY=&gt;3.30..., :LAWN_DART=&gt;7.70...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d be wary of mutating the origional array by mutating the keys, assigning the new keys values, and deleting the old keys.  If I were to use simple iteration to solve this problem I would probably instantiate a new hash and assign that hash key value pairs from within the each block.  Nothing fancy, but it works.</p>

<p>Using the Hash literal and #map looks a bit odd to me.  I haven&rsquo;t seen anyone build hashes this way.  The #map inside of the Hash literal is confusing unless you recall that #map always returns an array and that passing arrays of two objects to the Hash literal creates key-value pairs.  This solution feels like it is asking a bit more of the next developer to come along than the other options.</p>

<p>Now #inject&hellip; I like this one.  I like it despite the fact that <strong>IT ASKS A LOT!!!</strong> of the developers to follow and many things happens in very few lines, buuuuut it&rsquo;s a pretty slick peice of code.  And sometimes I <strong>am</strong> a sucker for a slick piece of code.  So, what does it assume?  Well, you have to know:</p>

<p>&#9;1. What #injects is.</p>

<p>&#9;2. That with #inject you have a memo object to pass to each execution of the block.</p>

<p>&#9;3. That the key-value pairs in toys are passed into the block as an array.</p>

<p>&#9;4. That you can use parenthesis and multiple assignment to make the block take only two arguements (the memo and the array containing the key and value) and instantly set the value of name and price.</p>

<p>&#9;5. That the return value of the #inject method is the return value of the last execution of the block, so you have to return the hash object from the block.</p>

<p>&#9;6. And finally, that you can add key-value pairs to a hash using the Hash#merge method, essentially taking the key-value assignment as a mini-hash and merging it into the existing hash. Maybe this would be a bit more clear: <code>newly_priced.merge( {name.upcase.to_sym =&gt; price * markup} )</code></p>

<div id="performance"></div>


<h2>Performance</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="mi">1_000_000</span>
</span><span class='line'>
</span><span class='line'><span class="n">markup</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="n">toys</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;rubber_ducky&quot;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;slinky&quot;</span>       <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;lawn_dart&quot;</span>    <span class="o">=&gt;</span> <span class="mi">7</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bmbm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;#each&#39;</span><span class="p">){</span> <span class="n">N</span><span class="o">.</span><span class="n">times</span><span class="p">{</span>
</span><span class='line'>                              <span class="n">toys</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>                                <span class="n">toys</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">toys</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">*</span> <span class="n">markup</span>
</span><span class='line'>                                <span class="n">toys</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>                              <span class="k">end</span>
</span><span class='line'>                              <span class="n">toys</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;#each.with_object&#39;</span><span class="p">){</span> <span class="n">N</span><span class="o">.</span><span class="n">times</span><span class="p">{</span>
</span><span class='line'>                                          <span class="n">toys</span><span class="o">.</span><span class="n">each</span><span class="o">.</span><span class="n">with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="p">(</span><span class="n">toy</span><span class="p">,</span> <span class="n">price</span><span class="p">),</span> <span class="n">newly_priced</span><span class="o">|</span>
</span><span class='line'>                                            <span class="n">newly_priced</span><span class="o">[</span><span class="n">toy</span><span class="o">]</span> <span class="o">=</span> <span class="n">price</span> <span class="o">*</span> <span class="n">markup</span>
</span><span class='line'>                                          <span class="k">end</span>
</span><span class='line'>                                        <span class="p">}</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;#map/Hash Literal&#39;</span><span class="p">){</span> <span class="n">N</span><span class="o">.</span><span class="n">times</span><span class="p">{</span>
</span><span class='line'>                                          <span class="n">new_prices</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span>
</span><span class='line'>                                                            <span class="n">toys</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">price</span><span class="o">|</span>
</span><span class='line'>                                                              <span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">price</span> <span class="o">*</span> <span class="n">markup</span><span class="o">]</span>
</span><span class='line'>                                                            <span class="k">end</span>
</span><span class='line'>                                                           <span class="o">]</span>
</span><span class='line'>                                        <span class="p">}</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;#inject&#39;</span><span class="p">){</span> <span class="n">N</span><span class="o">.</span><span class="n">times</span><span class="p">{</span>
</span><span class='line'>                              <span class="n">toys</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">newly_priced</span><span class="p">,</span> <span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">price</span><span class="p">)</span><span class="o">|</span>
</span><span class='line'>                                <span class="n">newly_priced</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">=&gt;</span> <span class="n">price</span> <span class="o">*</span> <span class="n">markup</span> <span class="p">)</span>
</span><span class='line'>                              <span class="k">end</span>
</span><span class='line'>                              <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#  Rehearsal -----------------------------------------------------</span>
</span><span class='line'><span class="c1">#  #each               0.200000   0.000000   0.200000 (  0.198086)</span>
</span><span class='line'><span class="c1">#  #each.with_object   0.590000   0.010000   0.600000 (  0.594112)</span>
</span><span class='line'><span class="c1">#  #map/Hash Literal   0.380000   0.000000   0.380000 (  0.384121)</span>
</span><span class='line'><span class="c1">#  #inject             0.300000   0.000000   0.300000 (  0.299615)</span>
</span><span class='line'><span class="c1">#  -------------------------------------------- total: 1.480000sec</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#                          user     system      total        real</span>
</span><span class='line'><span class="c1">#  #each               0.180000   0.000000   0.180000 (  0.180199)</span>
</span><span class='line'><span class="c1">#  #each.with_object   0.550000   0.000000   0.550000 (  0.553506)</span>
</span><span class='line'><span class="c1">#  #map/Hash Literal   0.370000   0.000000   0.370000 (  0.373649)</span>
</span><span class='line'><span class="c1">#  #inject             0.290000   0.000000   0.290000 (  0.295530)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ranked by quickest performance:</p>

<p>&#9;1. #each</p>

<p>&#9;2. #inject (1.6x #each)</p>

<p>&#9;3. #map/Hash literal (2.1x #each)</p>

<p>&#9;4. #each.with_object (3.1x #each)</p>

<p>The #each statement takes it!  But I didn&rsquo;t expect to incur such a performance penalty using #each.with_object. 3.1x!  Ouch.  The slick looking #inject maybe isn&rsquo;t so slick, finishing in 1.6x what it took #each to complete.  Maybe because #each is such a common method it has been highly optimized?  I don&rsquo;t have the answer.  If speed is your game maybe the obvious route is the best.</p>

<h2>Sources:</h2>

<p><a href="http://ruby-doc.org/core-2.2.3/Object.html#method-i-tap">
Ruby Docs - Tap
</a>
<a href="http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-each_with_object">
Ruby Docs - Each with Object
</a>
<a href="http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-inject">
Ruby Docs - Inject
</a>
<a href="http://www.bbs-software.com/blog/2013/11/22/rubys-injectreduce-and-each_with_object/" target="_blank">
&ldquo;Ruby&rsquo;s inject/reduce and each_with_object&rdquo; - Keith R Bennet
</a>
<a href="http://phrogz.net/tap-vs-each_with_object">
&ldquo;tap vs. each_with_object: tap is faster and less typing&rdquo; - Gavin Kistner
</a>
<a href="http://alexwilkinson.me/2014/02/15/inject_vs._each_with_object.html">
&ldquo;Inject vs. Each_With_Object&rdquo; - Alex Wilkinson
</a></p>

<p><a href="http://alexwilkinson.me/2014/02/15/inject_vs._each_with_object.html">
&ldquo;Inject vs. Each_With_Object&rdquo; - Alex Wilkinson
</a></p>

<p><a href="http://seejohncode.com/2012/01/02/ruby-tap-that/">
&ldquo;Ruby - #tap that!&rdquo; - John Crepezzi (just glanced at this one but it looks worth a read)
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyword Arguments]]></title>
    <link href="http://mminute.github.io/blog/2015/10/28/keyword-arguements/"/>
    <updated>2015-10-28T16:49:10-04:00</updated>
    <id>http://mminute.github.io/blog/2015/10/28/keyword-arguements</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/argument.jpg" width="400"></p>

<p>During a morning standup (less fun than <a href="https://www.youtube.com/watch?v=P0SICqoBevs" target="_blank">actual standup</a>) at work someone mentioned that a method was a good candidate for a refactor using Keyword Arguments.  So I went back to my desk, googled it, and my newb brain said &lsquo;Why?&rsquo;.</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg3</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span> <span class="o">+</span> <span class="n">arg2</span> <span class="o">+</span> <span class="n">arg3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">some_method</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;abc&quot;</span>
</span><span class='line'><span class="n">some_method</span> <span class="c1">#=&gt; ArgumentError: wrong number of arguments (0 for 3)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">method_with_keyword_args</span><span class="p">(</span><span class="ss">arg1</span><span class="p">:,</span> <span class="ss">arg2</span><span class="p">:,</span> <span class="ss">arg3</span><span class="p">:)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span> <span class="o">+</span> <span class="n">arg2</span> <span class="o">+</span> <span class="n">arg3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">method_with_keyword_args</span><span class="p">(</span><span class="ss">arg1</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">arg2</span><span class="p">:</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="ss">arg3</span><span class="p">:</span> <span class="s2">&quot;c&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;abc&quot;</span>
</span><span class='line'><span class="n">method_with_keyword_args</span> <span class="c1">#=&gt;ArgumentError: missing keywords: arg1, arg2, arg3</span>
</span></code></pre></td></tr></table></div></figure>


<p>So above we&rsquo;re looking at a method defined with your typical (positional) arguments and another method using <em>required</em> keyword arguments (defined by the colon following the argument name).  It just looked like more typing to me.  Maybe with a better error, so ok, there&rsquo;s a point for that I guess.</p>

<p>Default arguments are defined just as you might expect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">keyword_args</span><span class="p">(</span><span class="ss">arg1</span><span class="p">:</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="ss">arg2</span><span class="p">:</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="ss">arg3</span><span class="p">:</span><span class="s2">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span><span class="o">+</span><span class="n">arg2</span><span class="o">+</span><span class="n">arg3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">keyword_args</span> <span class="c1">#=&gt; &quot;abc&quot;</span>
</span><span class='line'><span class="n">keyword_args</span><span class="p">(</span><span class="ss">arg1</span><span class="p">:</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="ss">arg2</span><span class="p">:</span><span class="s2">&quot;World&quot;</span><span class="p">,</span> <span class="ss">arg3</span><span class="p">:</span><span class="s2">&quot;!&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;HelloWorld!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">positional_args</span><span class="p">(</span><span class="n">arg1</span><span class="o">=</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="n">arg2</span><span class="o">=</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="n">arg3</span><span class="o">=</span><span class="s2">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">arg1</span><span class="o">+</span><span class="n">arg2</span><span class="o">+</span><span class="n">arg3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But still, is there really much of an advantage?  Readability is one way that keyword arguments might be a good way to go rather than positional arguments.  If you were to encounter a method call in your codebase the keywords give you a clue as to what the arguments mean and maybe even how the argument are used within the method.  Positional arguments would require you to go look up the method definition.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># calling a method with positional arguments</span>
</span><span class='line'><span class="n">electrical_power</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 72</span>
</span><span class='line'><span class="c1"># calling a method with keyword arguments</span>
</span><span class='line'><span class="n">electrical_power</span><span class="p">(</span><span class="ss">volts</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="ss">ohms</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 72</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beyond that, since in your are referencing the variable name contained in your method from your method call and assigning it a value for that method call, the order of the arguments does not matter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># calling a method with positional arguments</span>
</span><span class='line'><span class="n">electrical_power</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#=&gt; 72</span>
</span><span class='line'><span class="n">electrical_power</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span> <span class="c1">#=&gt; 0.3333333333333333</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># calling a method with keyword arguments</span>
</span><span class='line'><span class="n">electrical_power</span><span class="p">(</span><span class="ss">volts</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="ss">ohms</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#=&gt; 72</span>
</span><span class='line'><span class="n">electrical_power</span><span class="p">(</span><span class="ss">ohms</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">volts</span><span class="p">:</span> <span class="mi">12</span><span class="p">)</span> <span class="c1">#=&gt; 72</span>
</span></code></pre></td></tr></table></div></figure>


<p>To do something similar without keyword arguments would require passing a hash as an argument:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">electrical_power</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inputs</span><span class="o">[</span><span class="ss">:volt</span><span class="o">]**</span><span class="mi">2</span> <span class="o">/</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:ohms</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">electrical_power</span><span class="p">({</span><span class="ss">volts</span><span class="p">:</span><span class="mi">12</span><span class="p">,</span> <span class="ss">ohms</span><span class="p">:</span><span class="mi">2</span><span class="p">})</span> <span class="c1">#=&gt; 72</span>
</span><span class='line'><span class="n">electrical_power</span> <span class="c1">#=&gt; ArgumentError: wrong number of arguments (0 for 1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Giving that method default arguments might look something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">electrical_power</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">{</span><span class="ss">volts</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="ss">ohms</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span><span class='line'>  <span class="n">inputs</span><span class="o">[</span><span class="ss">:volts</span><span class="o">]**</span><span class="mi">2</span> <span class="o">/</span> <span class="n">inputs</span><span class="o">[</span><span class="ss">:ohms</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># OR</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">electrical_power</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="n">inputs</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:volts</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">/</span> <span class="n">inputs</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:ohms</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">electrical_power</span><span class="p">({</span><span class="ss">ohms</span><span class="p">:</span><span class="mi">4</span> <span class="p">,</span><span class="ss">volts</span><span class="p">:</span><span class="mi">8</span><span class="p">})</span> <span class="c1">#=&gt;16</span>
</span><span class='line'><span class="n">electrical_power</span> <span class="c1">#=&gt; 72</span>
</span></code></pre></td></tr></table></div></figure>


<p>So why not just use keyword arguments at that point and skip the curly braces, square brackets, and <a href="http://www.slate.com/content/dam/slate/blogs/lexicon_valley/2014/05/01/mean_girls_slang_fetch_10_years_later_why_it_didn_t_catch_on_according_to/stop_trying_to_make_fetch_happen_1.png.CROP.promo-mediumlarge.png" target="_blank">&lsquo;.fetch&rsquo;-es</a>?</p>

<p>What really sold me is this:</p>

<blockquote><p>When one Ruby method has to know the correct order of another method’s positional arguments, we end up with <a href="https://en.wikipedia.org/wiki/Connascence_(computer_programming)">connascence of position</a>.</p>

<p>If we decide to change the order of the parameters to mysterious_total, we must change all callers of that method accordingly. Not only that, but our mental model of how to use this method must change as well, which isn’t as simple as a find/replace.</p></blockquote>

<p>This statement gave me two thoughts:</p>

<p>&#9;1. I haven&rsquo;t been programming for long, but I&rsquo;ve learned enough to know that it&rsquo;s easier to build a clean interface once than to modify every call to a method when its implementation changes.  <strong>When</strong>, not if.</p>

<p>&#9;2. More than that, if you are calling a method from another method or interacting with another object, with positional arguments that method or object now needs to know something about the order of arguments passed to the original method.  It&rsquo;s like it gets a little peak into the internal of the first method which doesn&rsquo;t feel very <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" target="_blank">encapsulated</a> to me.</p>

<p>Happy Halloween!!!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">spooky_method</span><span class="p">(</span><span class="ss">who</span><span class="p">:,</span><span class="ss">what</span><span class="p">:,</span><span class="ss">where</span><span class="p">:)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">who</span><span class="si">}</span><span class="s2"> did the </span><span class="si">#{</span><span class="n">what</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;He did the monster </span><span class="si">#{</span><span class="n">what</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;It was a smash.&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;It was a </span><span class="si">#{</span><span class="n">where</span><span class="si">}</span><span class="s2"> smash.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">spooky_method</span><span class="p">(</span><span class="ss">who</span><span class="p">:</span> <span class="s2">&quot;Frankenstein&quot;</span><span class="p">,</span> <span class="ss">what</span><span class="p">:</span> <span class="s2">&quot;Mash&quot;</span><span class="p">,</span> <span class="ss">where</span><span class="p">:</span><span class="s2">&quot;Graveyard&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#=&gt; &quot;Frankenstein did the Mash!&quot;</span>
</span><span class='line'>  <span class="c1">#=&gt; &quot;He did the monster Mash.&quot;</span>
</span><span class='line'>  <span class="c1">#=&gt; &quot;It was a smash.&quot;</span>
</span><span class='line'>  <span class="c1">#=&gt; &quot;It was a Graveyard smash.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://mminute.github.io/images/MonsterMash-Imgur.jpg" width="400"></p>

<h2>Sources:</h2>

<p><a href="https://robots.thoughtbot.com/ruby-2-keyword-arguments" target="_blank">
&ldquo;Ruby 2 Keyword Arguments&rdquo; - Ian C. Anderson (Thoughtbot)
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A New Hash#map]]></title>
    <link href="http://mminute.github.io/blog/2015/10/19/hash-map/"/>
    <updated>2015-10-19T11:57:32-04:00</updated>
    <id>http://mminute.github.io/blog/2015/10/19/hash-map</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/NY_Map.jpg" width="400" alt="https://www.etsy.com/shop/bananastrudel?ref=l2-shopheader-name"></p>

<h3>The Problem</h3>

<p>The Enumerable mixin&rsquo;s <a href="http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-map">#map</a>/<a href="http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-collect">#collect</a> methods are fantastic for mutating the values in an array but have an inconsistent behavior when applied to a hash.  So since using #map/#collect on an array gives you this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; [1,4,9]</span>
</span></code></pre></td></tr></table></div></figure>


<p>you might expect the hash to behave something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="ss">k</span><span class="p">:</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; {a: 1, b: 4, c: 9}</span>
</span></code></pre></td></tr></table></div></figure>


<p>but instead you get:
<code>SyntaxError: (irb):1: syntax error, unexpected ':', expecting '}'</code></p>

<!--more-->


<p>You can get around this by wrapping your key-value pair in curly braces</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="p">{</span><span class="ss">k</span><span class="p">:</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; [{:k=&gt;1}, {:k=&gt;4}, {:k=&gt;9}] </span>
</span></code></pre></td></tr></table></div></figure>


<p>but now you have an array of key-value pairs which still is not the behavior that we are shooting for.</p>

<h3>The Solution</h3>

<p>It&rsquo;s not pretty but we can use the <a href="http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-inject">Enumerable#inject</a> combined with the <a href="http://ruby-doc.org/core-2.2.2/Hash.html#method-i-merge">Hash#merge</a> methods to hack our way toward our goal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span> <span class="p">{}</span> <span class="p">){</span><span class="o">|</span> <span class="nb">hash</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="o">|</span> <span class="nb">hash</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="n">k</span><span class="o">=&gt;</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span> <span class="p">)}</span>
</span><span class='line'><span class="c1">#=&gt; {:a=&gt;1, :b=&gt;4, :c=&gt;9} </span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straight forward if you have seen inject, right?  The hash (creatively called hash inside the block) acts as a collector.  Passing a key-value pair into the #merge method called on the collector hash essentially says &lsquo;Hey, Ruby!  Here&rsquo;s a hash with one key-value pair to merge into #inject&rsquo;s collector!&rsquo; Then the merged hash is passed back to #inject to be the collector for the next key-value pair.</p>

<h4>But that&rsquo;s odd&hellip;</h4>

<p>The weird bit is between the pipes.  What&rsquo;s going on there?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span> <span class="p">{}</span> <span class="p">){</span><span class="o">|</span> <span class="nb">hash</span><span class="p">,</span> <span class="n">pair</span> <span class="o">|</span> <span class="n">pair</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; [c: , 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the pair is passed into the block as an array containing the key and value as separate elements. By replacing <code>pair</code> with <code>(k,v)</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span> <span class="p">{}</span> <span class="p">){</span><span class="o">|</span> <span class="nb">hash</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="o">|</span> <span class="nb">hash</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="n">k</span><span class="o">=&gt;</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span> <span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>we match up <code>k</code> to the first value in the array and <code>v</code> to the second value in the array through <a href="https://nathanhoad.net/ruby-multiple-assignment"><strong>Multiple Assignment</strong></a> along the lines of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">)</span><span class="o">=</span><span class="n">a</span> <span class="c1">#=&gt; [1,2,3]</span>
</span><span class='line'><span class="n">x</span> <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="n">y</span> <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="n">z</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#OR</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="n">x</span> <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="n">y</span> <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="n">z</span> <span class="c1">#=&gt; 3</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span>
</span><span class='line'><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">r</span><span class="p">)</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'><span class="n">q</span> <span class="c1">#=&gt; 6</span>
</span><span class='line'><span class="n">r</span> <span class="c1">#=&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, inside the block we tell Ruby to make</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span><span class="o">=[</span><span class="n">some_key</span><span class="p">,</span> <span class="n">some_value</span><span class="o">]</span>
</span><span class='line'><span class="n">k</span> <span class="c1">#=&gt; some_key</span>
</span><span class='line'><span class="n">v</span> <span class="c1">#=&gt; some_value</span>
</span></code></pre></td></tr></table></div></figure>


<p>then recreate the key-value pair with some sort of mapping executed on the key or value (or maybe even both) <code>k =&gt; v*v</code> and merge them into the collector hash <code>hash.merge( k=&gt; v*v )</code> and then let inject do its' thing and return the collector hash.</p>

<p>Vois là! You&rsquo;ve built a more semantic Hash#map. Don&rsquo;t go monkey-patching anything. Maybe try a <a href="http://timelessrepo.com/refinements-in-ruby">refinement</a> instead?</p>

<h2>Sources:</h2>

<p><a href="http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-map">
Ruby Doc Enumerable#map
</a>
<a href="http://chrisholtz.com/blog/lets-make-a-ruby-hash-map-method-that-returns-a-hash-instead-of-an-array/">
Chris Holtz- Let&rsquo;s Make a Ruby Hash Map Method That Returns a Hash Instead of an Array
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyday Rails: Testing With RSpec]]></title>
    <link href="http://mminute.github.io/blog/2015/09/23/everyday-rails-testing-with-rspec/"/>
    <updated>2015-09-23T14:00:46-04:00</updated>
    <id>http://mminute.github.io/blog/2015/09/23/everyday-rails-testing-with-rspec</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/pirates.jpg" /></p>

<p>What&rsquo;s a pirate&rsquo;s favorite testing framework?
ArrrrrrrrSpec!</p>

<p>This past week I&rsquo;ve been working through <a href="http://www.aaronsumner.com" style="text-decoration: none; color: blue">Aaron Sumner&rsquo;s</a> <a href="http://leanpub.com/everydayrailsrspec" style="text-decoration: none; color: blue">&ldquo;Everyday Rails Testing with RSpec&rdquo;</a> in order to bone up on my TDD.  This is the CliffsNotes version since, unlike &lsquo;Romeo and Juliet&rsquo;, you can&rsquo;t run down to Blockbuster and rent the movie.  Mostly because good luck finding a Blockbuster and also, not a lot of movies about Rails&hellip; or RSpec&hellip; I didn&rsquo;t notice any model specs in the 1995 classic <a href="http://www.imdb.com/title/tt0113243" style="text-decoration: none; color: blue">&lsquo;Hackers&rsquo;</a>.</p>

<!--more-->


<p>So here it is, my notes, chapter by chapter.</p>

<ul>
<li><a href="#01" style="text-decoration: none">01. Introduction / 02. Setup</a></li>
<li><a href="#04" style="text-decoration: none">04. Generating Test Data with Factories</a></li>
<li><a href="#05" style="text-decoration: none">05. Basic Controller Specs</a></li>
<li><a href="#06" style="text-decoration: none">06. Advanced Controller Specs</a></li>
<li><a href="#07" style="text-decoration: none">07. Controller Spec Cleanup</a></li>
<li><a href="#08" style="text-decoration: none">08. Feature Specs</a></li>
<li><a href="#09" style="text-decoration: none">09. Speeding up Specs</a></li>
<li><a href="#10" style="text-decoration: none">10. Testing the Rest</a></li>
</ul>


<div id="01"></div>


<h2>01. Introduction / 02. Setup</h2>

<p><strong>Tests should be:</strong></p>

<ul>
<li><em>Reliable</em></li>
<li><em>Easy to write</em></li>
<li><em>Easy to read</em></li>
</ul>


<p><strong>Steps for Setup:</strong></p>

<ul>
<li>Add gems</li>
<li>Add test DB

<ul>
<li>config/database.yml (pdf pg 24)</li>
</ul>
</li>
<li>Instal Rspec

<ul>
<li>bin/rails g rspec:install</li>
</ul>
</li>
<li>Configure RSepc

<ul>
<li>In &lsquo;.rspec&rsquo; add &lsquo;—format documentation&rsquo;</li>
<li>Other configurations in &lsquo;/spec/rails_helper.rb&rsquo; and &lsquo;/spec/spec_helper.rb&rsquo;</li>
</ul>
</li>
<li>Create Spec executable

<ul>
<li>&lsquo;bundle binstubs rspec-core&rsquo;</li>
</ul>
</li>
</ul>


<h2>03. Model Specs</h2>

<p><strong>Describe a set of expectations</strong></p>

<ul>
<li>Each example only expects one thing</li>
<li>Each example is explicit</li>
<li>Each example’s description begins with a verb, not should</li>
</ul>


<p><strong>Describe, Context, Before and After hooks</strong></p>

<ul>
<li>can have nested describe blocks and separate contexts within describe blocks.

<ul>
<li>describe and context technically interchangeable.

<ul>
<li>good style is to use describe to outline general functionality and context to outline a specific state.</li>
</ul>
</li>
</ul>
</li>
<li>before block is run BEFORE each example in its describe block

<ul>
<li>before :each is default behavior of before (may omit the each if desired)</li>
</ul>
</li>
<li>after for cases such as disconnecting from a service</li>
<li>Some developers use method names for the description of nested describe blocks

<ul>
<li>ex) #by_letter</li>
</ul>
</li>
</ul>


<p><strong>Summary:</strong></p>

<ul>
<li>Active and explicit expectations</li>
<li>Test for what should as well as what should not happen</li>
<li>Test edge cases</li>
<li>Organize for readability</li>
</ul>


<div id="04"></div>


<h2>04. Generating Test Data with Factories</h2>

<ul>
<li>Locate files in spec/factories directory</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:contact</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">firstname</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">lastname</span> <span class="s2">&quot;Doe&quot;</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:email</span><span class="p">){</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;johndoe</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@example.com&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Can pass ruby  code into FactoryGirl to dynamically assign values.

<ul>
<li>pass in within a block similar to example above</li>
</ul>
</li>
<li>Filenaming convention not as strict as specs (could place all factories in single file if desired) but typically save as a filename that is the plural of the model name.</li>
<li>Using FactoryGirl in tests

<ul>
<li>.create persists the instance</li>
<li>.build does not (sim to .new for regular ruby objects)</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:contact</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Override attributes:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:contact</span><span class="p">,</span> <span class="ss">firstname</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Simplifying Syntax</strong></p>

<p><em>spec/rails_helper.rb</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span><span class="o">|</span><span class="n">config</span><span class="o">|</span><span class="err"> </span>
</span><span class='line'>  <span class="c1"># Include Factory Girl syntax to simplify calls to factories</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FactoryGirl</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'>  <span class="c1"># other configurations omitted ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allows use of “build(:contact), create(:contact), attributes_for(:contact), build_stubbed(:contact)”</li>
</ul>


<p><strong>Inherited Factories</strong></p>

<ul>
<li>nested ‘factory’ blocks are factories inheriting from top level factory.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:phone</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:contact</span>
</span><span class='line'>    <span class="n">phone</span> <span class="s1">&#39;123-555-1234&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:home_phone</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">phone_type</span> <span class="s1">&#39;home&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:work_phone</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">phone_type</span> <span class="s1">&#39;work&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:mobile_phone</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">phone_type</span> <span class="s1">&#39;mobile&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>“association” creates a new ‘Contact’ on the fly for instance of a phone to belong to if one isn&rsquo;t specifically passed to the factory method</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">contact</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:contact</span><span class="p">)</span>
</span><span class='line'><span class="n">create</span><span class="p">(</span><span class="ss">:home_phone</span><span class="p">,</span> <span class="ss">contact</span><span class="p">:</span> <span class="n">contact</span><span class="p">,</span> <span class="ss">phone</span><span class="p">:</span> <span class="s1">&#39;785-555-1234&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Fake Data</strong></p>

<ul>
<li>Faker</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:contact</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">firstname</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">first_name</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">lastname</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">last_name</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">email</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Internet</span><span class="o">.</span><span class="n">email</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Advanced Associations</strong></p>

<ul>
<li>FactoryGirl callbacks</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:contact</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">firstname</span> <span class="p">{</span><span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">first_name</span><span class="p">}</span>
</span><span class='line'>    <span class="n">lastname</span> <span class="p">{</span><span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">last_name</span><span class="p">}</span>
</span><span class='line'>    <span class="n">email</span> <span class="p">{</span><span class="no">Faker</span><span class="o">::</span><span class="no">Internet</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:build</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">contact</span><span class="o">|</span>
</span><span class='line'>      <span class="o">[</span><span class="ss">:home_phone</span><span class="p">,</span> <span class="ss">:work_phone</span><span class="p">,</span> <span class="ss">:mobile_phone</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">phone</span><span class="o">|</span>
</span><span class='line'>        <span class="n">contact</span><span class="o">.</span><span class="n">phones</span> <span class="o">&lt;&lt;</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:phone</span><span class="p">,</span> <span class="ss">phone_type</span><span class="p">:</span> <span class="n">phone</span><span class="p">,</span> <span class="ss">contact</span><span class="p">:</span> <span class="n">contact</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<div id="05"></div>


<h2>05. Basic Controller Specs</h2>

<ul>
<li>place in ‘spec/controllers’</li>
</ul>


<h3>Why test controllers?</h3>

<ul>
<li>Controllers are classes with methods too</li>
<li>Controller specs can often be written more quickly than their integration spec counterparts</li>
<li>Controller specs usually run more quickly than integration specs</li>
</ul>


<p><strong>Syntax</strong></p>

<ul>
<li>Takes http method (get/post), controller method (:index, :create, :new, :show, :edit, :update, :destroy), and (optional) parameters passed to the method</li>
<li>attributes_for

<ul>
<li><em>&lsquo;FactoryGirl.attributes_for(:contact)&rsquo;</em> produces hash</li>
</ul>
</li>
<li>Create factories for invalid data to test controllers</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:contact</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">firstname</span> <span class="p">{</span><span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">first_name</span><span class="p">}</span>
</span><span class='line'>    <span class="n">lastname</span> <span class="p">{</span><span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">last_name</span><span class="p">}</span>
</span><span class='line'>    <span class="n">email</span> <span class="p">{</span><span class="no">Faker</span><span class="o">::</span><span class="no">Internet</span><span class="o">.</span><span class="n">email</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:invalid_contact</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">firstname</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Controller Spec DSL</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;GET #show&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;assigns the requested contact to @contacts&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">contact</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:contact</span><span class="p">)</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="n">contact</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:contact</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">contact</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;renders the :show template&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">contact</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:contact</span><span class="p">)</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="n">contact</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span> <span class="ss">:show</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>expects(assigns(:contact)).to eq contact</strong> checks that @contact varible created in the controller is equal to contact created in test.</li>
<li><strong>expect(response).to render_template :show</strong> checks that the response from controller back to browser should render using show.html.er</li>
<li>Can pass procs to expect

<ul>
<li><strong>expect{ post :create, contact: attributes_for(:contact, phones_attributes: @phones)}.to change(Contact, :count).by(1)</strong></li>
</ul>
</li>
</ul>


<div id='06'></div>


<h2>06. Advanced Controller Specs</h2>

<ul>
<li>Testing authentication/login, authorization/roles</li>
</ul>


<div id='07'></div>


<h2>07. Controller Spec Cleanup</h2>

<ul>
<li>Reducing redundancy and brittleness w/o sacrificing readability

<ul>
<li>share examples across describe and context blocks</li>
<li>helper macros to reduce repetition</li>
<li>create custom RSpec matchers</li>
</ul>
</li>
</ul>


<p><strong>Shared Examples</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">shared_examples</span> <span class="s1">&#39;public access to contacts&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@smith</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:contact</span><span class="p">,</span> <span class="ss">firstname</span><span class="p">:</span> <span class="s1">&#39;Lawrence&#39;</span><span class="p">,</span> <span class="ss">lastname</span><span class="p">:</span> <span class="s1">&#39;Smith&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@jones</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:contact</span><span class="p">,</span> <span class="ss">lastname</span><span class="p">:</span> <span class="s1">&#39;Jones&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">describe</span> <span class="s1">&#39;GET #index&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">context</span> <span class="s1">&#39;with params[:letter]&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">it</span> <span class="s2">&quot;populates an array of contacts starting with the letter&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">get</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">letter</span><span class="p">:</span> <span class="s1">&#39;S&#39;</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:contacts</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">match_array</span><span class="p">(</span><span class="o">[</span><span class="vi">@smith</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">it</span> <span class="s2">&quot;renders the :index template&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">get</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">letter</span><span class="p">:</span> <span class="s1">&#39;S&#39;</span>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span> <span class="ss">:index</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="err">“</span><span class="n">admin</span> <span class="n">access</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it_behaves_like</span> <span class="err">‘</span><span class="kp">public</span> <span class="n">access</span> <span class="n">to</span> <span class="n">contacts</span><span class="err">’</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Helper Macros</strong></p>

<ul>
<li>Place macro files in ‘spec/support’ as a module to be included in RSpec’s configuration</li>
<li>Inside spec/rails_helper.rb -> RSpec.configure block, add “config.include ModuleName”, and require the file at the top

<ul>
<li>when using authentication through devise or similar refer to their docs for incorporation into test suite</li>
</ul>
</li>
</ul>


<p><strong>Using Custom RSpec Matchers</strong></p>

<ul>
<li>place custom matchers in ‘spec/support/matchers’, one matcher per file.  Should detect files by default</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Matchers</span><span class="o">.</span><span class="n">define</span> <span class="ss">:require_login</span> <span class="k">do</span> <span class="o">|</span><span class="n">expected</span><span class="o">|</span>
</span><span class='line'>  <span class="n">match</span> <span class="k">do</span> <span class="o">|</span><span class="n">actual</span><span class="o">|</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">actual</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">redirect_to</span> <span class="p">\</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">url_helpers</span><span class="o">.</span><span class="n">login_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">failure_message</span> <span class="k">do</span> <span class="o">|</span><span class="n">actual</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;expected to require login to access the method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">failure_message_when_negated</span> <span class="k">do</span> <span class="o">|</span><span class="n">actual</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;expected not to require login to access the method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">description</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;redirect to the login form&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>In Spec</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;requires login&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="n">create</span><span class="p">(</span><span class="ss">:contact</span><span class="p">),</span> <span class="ss">contact</span><span class="p">:</span> <span class="n">attributes_for</span><span class="p">(</span><span class="ss">:contact</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">require_login</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<div id='08'></div>


<h2>08. Feature Specs</h2>

<ul>
<li>Feature specs/ integration testing, aka. acceptance tests</li>
<li>Represents how users will interact with your code</li>
<li>within feature specs it is ok to have multiple expectations for a given scenario.

<ul>
<li>can also have expectations mid-test</li>
</ul>
</li>
<li>Launchy- saves the feature spec’s current HTML to a temp file and renders in default browser
to see result of previous step in spec insert ‘save_and_open_page’ into spec.</li>
</ul>


<p><strong>Including Javascript Interactions</strong></p>

<ul>
<li>Default Capybara web-driver (Rack::Test) cannot handle javascript, so ignores it.

<ul>
<li>Use Selenium instead.</li>
<li>js: true takes into account javascript by running a javascript capable web-driver</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;About BigCo modal&quot;</span>  <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;toggles display of the modal about display&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If firefox hangs at a black page and the spec fails and returns the error:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Error</span><span class="o">::</span><span class="ss">WebDriverError</span><span class="p">:</span> <span class="n">unable</span> <span class="n">to</span> <span class="n">obtain</span> <span class="n">stable</span> <span class="n">firefox</span> <span class="n">connection</span> <span class="k">in</span> <span class="mi">60</span> <span class="n">seconds</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>check gem file and remove version numbers (if present) from selenium web-driver to use the latest version.

<ul>
<li>if that fails <strong>&lsquo;bundle update selenium-webdriver&rsquo;</strong></li>
</ul>
</li>
<li>Configure database cleaner in <strong>&lsquo;RSpec.configure&rsquo;</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean_with</span> <span class="ss">:truncation</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">around</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">example</span><span class="o">|</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">cleaning</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">example</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Next, monkey patch ActiveRecord to use threads

<ul>
<li>Add additional file spec/support/shared_db_connection.rb</li>
<li>Needed to share data state across the Selenium web server and the test code itself</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">mattr_accessor</span> <span class="ss">:shared_connection</span>
</span><span class='line'>  <span class="vc">@@shared_connection</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">connection</span>
</span><span class='line'>    <span class="vc">@@shared_connection</span> <span class="o">||</span> <span class="n">retrieve_connection</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">shared_connection</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Headless options for Javascript (run test without waiting for firefox to launch):

<ul>
<li>capybara-webkit</li>
<li>Poltergeist</li>
</ul>
</li>
</ul>


<p><strong>Waiting for Javascript</strong></p>

<ul>
<li>In &lsquo;<strong>rails_helper.rb</strong>&rsquo; set <strong>Capybara.default_wait_time = ##</strong> to change the amount of time that Capybara will wait before giving up on finding an item from default value of 2 to desired number of seconds.</li>
</ul>


<div id='09'></div>


<h2>09. Speeding up Specs</h2>

<ul>
<li>Refactoring for speed

<ul>
<li>Amount of time it takes to run specs</li>
<li>How quickly you can create meaningful, clear specs</li>
</ul>
</li>
</ul>


<p><strong>Optional Terse Syntax</strong></p>

<ul>
<li><strong>let()</strong> in place of <strong>before :each</strong>

<ul>
<li>caches the value without assigning it to an instance variable</li>
<li>lazily evaluated. does not get assigned until a spec calls upon it.</li>
<li><strong>let(:smith){create(:contact, firstname: &lsquo;Lawrence&rsquo;, lastname: ‘Smith’)}</strong></li>
<li>refer to with non-symbol version of item inside let(), i.e.) :smith to smith

<ul>
<li>for tests requiring persisted data call the variable before the expects to instantiate the object and persist it to the db</li>
<li><strong>let()!</strong> forces the var to be assigned prior to each example</li>
</ul>
</li>
</ul>
</li>
<li><strong>subject{}</strong></li>
<li><strong>it{}</strong> and <strong>specify{}</strong> (synonymous)- one line versions of it statements

<ul>
<li>subject{ build(:user, name1: ‘J’, name2: ‘Doe’) }; it{ is_expected.to be_named ‘J Doe’}</li>
</ul>
</li>
<li>Shoulda - shoulda-matcher gem

<ul>
<li>include gem in :test group for access to many helpful matchers</li>
</ul>
</li>
</ul>


<p><strong>Mocks and Stubs</strong></p>

<ul>
<li>Mock- some object representing a real object for testing purposes. aka test doubles. Mocks do not touch the database- thus less time to set up in a test

<ul>
<li>use FactoryGirl <strong>build_stubbed()</strong> method to generate a fully-stubbed fake.  Does not persist.</li>
</ul>
</li>
<li>Stub- overrides a method call on a given object and returns a predetermined value for it.

<ul>
<li><strong>allow(Contact).to receive(:order).with(‘lastname, firstname’).and_return([contact])</strong></li>
</ul>
</li>
</ul>


<p><strong>Automation with Guard and Spring</strong></p>

<ul>
<li>Guard watches specified files and executes actions based on what it observes

<ul>
<li>add <strong>guard-spec</strong> to test and development groups</li>
<li>create Guardfile from the command line: <strong>guard init spec</strong></li>
<li>run <strong>‘guard’</strong> in terminal</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="ss">:rspec</span><span class="p">,</span> <span class="ss">cmd</span><span class="p">:</span> <span class="s1">&#39;spring rspec --color --format documentation&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">all_on_start</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">all_after_pass</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/.+_spec\.rb$}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^lib/(.+)\.rb$}</span><span class="p">)</span>     <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/lib/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;spec/spec_helper.rb&#39;</span><span class="p">)</span>  <span class="p">{</span> <span class="s2">&quot;spec&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/(.+)\.rb$}</span><span class="p">)</span>                           <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/(.*)(\.erb|\.haml)$}</span><span class="p">)</span>                 <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/controllers/(.+)_(controller)\.rb$}</span><span class="p">)</span>  <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">s/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/support/(.+)\.rb$}</span><span class="p">)</span>                  <span class="p">{</span> <span class="s2">&quot;spec&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;app/controllers/application_controller.rb&#39;</span><span class="p">)</span>  <span class="p">{</span> <span class="s2">&quot;spec/controllers&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/views/(.+)/.*\.(erb|haml)$}</span><span class="p">)</span>          <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/features/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/.+_spec\.rb$}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^lib/(.+)\.rb$}</span><span class="p">)</span>     <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/lib/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;spec/rails_helper.rb&#39;</span><span class="p">)</span>  <span class="p">{</span> <span class="s2">&quot;spec&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Spring keeps rails app running after 1st run of test suite to eliminate spin-up time and make test suite run faster on subsequent executions

<ul>
<li>add ‘spring-commands-rspec’ to gemfile :development</li>
<li>make the new <strong>&lsquo;bin/rspec&rsquo;</strong> available as a binstub

<ul>
<li><strong>&lsquo;spring binstub rspec&rsquo;</strong></li>
<li><strong>&lsquo;spring stop&rsquo;</strong></li>
</ul>
</li>
</ul>
</li>
</ul>


<p><strong>Add Tags to Tests</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="err">“</span><span class="n">processes</span> <span class="n">a</span> <span class="n">credit</span> <span class="n">card</span><span class="err">”</span><span class="p">,</span> <span class="ss">focus</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rspec</span> <span class="err">—</span><span class="n">tag</span> <span class="n">focus</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>runs only test tagged with focus: true</li>
<li>add to rails_helper:

<ul>
<li><strong>&lsquo;config.run_all_when_everything_filtered = true&rsquo;</strong></li>
</ul>
</li>
<li>Can configure RSpec to only run/never run examples with specific tags</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span> <span class="n">config</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">filter_run</span> <span class="ss">focus</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">filter_run_excluding</span> <span class="ss">slow</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Skipping unneeded tests</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="err">“</span><span class="n">loads</span> <span class="n">a</span> <span class="n">lot</span> <span class="n">of</span> <span class="n">data</span><span class="err">”</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">skip</span> <span class="err">“</span><span class="n">no</span> <span class="n">longer</span> <span class="n">needed</span><span class="err">”</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<div id='10'></div>


<h2>10. Testing the Rest</h2>

<ul>
<li>Email delivery, file uploads, manipulating time within specs, testing against external web services, how to test your application’s API, testing rake tasks.</li>
<li>Emails: ‘email_spec’ gem

<ul>
<li>add to rails helper:

<ul>
<li><strong>&lsquo;config.include(EmailSpec::Helpers)&rsquo;</strong></li>
<li><strong>&lsquo;config.include(EmailSpec::Matchers)&rsquo;</strong></li>
</ul>
</li>
</ul>
</li>
<li>Allows addition to spec such as:

<ul>
<li><strong>&lsquo;expect( open_last_email ).to be_delivered_from sender.email&rsquo;</strong></li>
<li><strong>&lsquo;expect( open_last_email ).to have_reply_to sender.email&rsquo;</strong></li>
<li><strong>&lsquo;expect( open_last_email ).to be_delivered_to recipient.email&rsquo;</strong></li>
<li><strong>&lsquo;expect( open_last_email ).to have_subject message.subject&rsquo;</strong></li>
<li><strong>&lsquo;expect( open_last_email ).to have_body_text message.message&rsquo;</strong>

<ul>
<li>open_last_email is helper that opens the most recently sent email and gives you access to its attributes</li>
</ul>
</li>
</ul>
</li>
<li>Can also create new email objects and work directly with them</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">email</span> <span class="o">=</span> <span class="no">MessageMailer</span><span class="o">.</span><span class="n">create_friend_request</span><span class="p">(</span><span class="err">“</span><span class="n">someguy</span><span class="vi">@someplace</span><span class="o">.</span><span class="n">com</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span> <span class="n">email</span> <span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">deliver_to</span><span class="p">(</span><span class="err">“</span><span class="n">otherguy</span><span class="vi">@otherplace</span><span class="o">.</span><span class="n">com</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_subject</span> <span class="err">“</span><span class="no">Friend</span> <span class="no">Request</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Can also access and test against messages without extra dependency</p>

<ul>
<li>Each time a message is sent out it gets pushed to ActionMailer::Base.deliveries</li>
<li>Can access latest by ActionMailer::Base.deliveries.last

<ul>
<li>clear delivered emails by ActionMailer::Base.deliveries = []</li>
</ul>
</li>
<li>Testing: expect(ActionMailer::Base.deliveries.last).to include user.email</li>
</ul>
</li>
<li><p><strong>Testing the Time</strong></p>

<ul>
<li>Timecop gem - freeze time</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="err">“</span><span class="n">wishes</span> <span class="n">the</span> <span class="n">visitor</span> <span class="n">a</span> <span class="no">Happy</span> <span class="no">New</span> <span class="no">Year</span> <span class="n">on</span> <span class="no">Jan</span> <span class="mi">1</span><span class="err">”</span>
</span><span class='line'><span class="no">Timecop</span><span class="o">.</span><span class="n">travel</span> <span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="err">“</span><span class="no">January</span> <span class="mi">1</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">visti</span> <span class="n">root_url</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span> <span class="n">page</span> <span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span> <span class="err">“</span><span class="no">Happy</span> <span class="no">New</span> <span class="no">Year</span><span class="o">!</span><span class="err">”</span>
</span><span class='line'><span class="no">Timecop</span><span class="o">.</span><span class="n">return</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Testing Web Services</strong>

<ul>
<li>VCR gem- watches for external http requests coming from your code. When it encounters one it causes the test to fail. In order to make it pass you must create a ‘cassette’ onto which to record the http transaction.  Run the test again, and the vcr captures the request and response into a file.  Now future test making the same request will use data from the file instead of making another network request to the api.</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span><span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describeAddress</span><span class="p">,</span><span class="ss">:type</span><span class="o">=&gt;</span><span class="ss">:modeldo</span> <span class="n">describe</span> <span class="s1">&#39;geocoding&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;geocodes a new address&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">VCR</span><span class="o">.</span><span class="n">use_cassette</span><span class="p">(</span><span class="s1">&#39;allen_fieldhouse&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:address</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">street</span><span class="p">:</span> <span class="s1">&#39;1651 Naismith Drive&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">city</span><span class="p">:</span>   <span class="s1">&#39;Lawrence&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">state</span><span class="p">:</span>  <span class="s1">&#39;KS&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">address</span><span class="o">.</span><span class="n">latitude</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">38</span><span class="o">.</span><span class="mi">9541438</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">address</span><span class="o">.</span><span class="n">longitude</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="o">-</span><span class="mi">95</span><span class="o">.</span><span class="mi">2527379</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Testing Your Application’s API</strong>

<ul>
<li>API specific test go in ‘spec/requests’</li>
<li>use simple get, post, delete, patch http verbs</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">rails_helper</span><span class="err">’</span>
</span><span class='line'><span class="n">describe</span> <span class="err">‘</span><span class="no">Contacts</span> <span class="no">API</span><span class="err">’</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:request</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="err">‘</span><span class="n">sends</span> <span class="n">an</span> <span class="n">individual</span> <span class="n">contact</span><span class="err">’</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">contact</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:contact</span><span class="p">)</span>
</span><span class='line'>    <span class="n">get</span> <span class="err">“</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">contacts</span><span class="o">/</span><span class="c1">#{contact.id}”, nil, {‘HTTP_ACCEPT’ =&gt; ‘application/vnd.contacts.v1’}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:success</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">json</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">json</span><span class="o">[</span> <span class="err">‘</span><span class="n">firstname</span><span class="err">’</span> <span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">contact</span><span class="o">.</span><span class="n">firstname</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">json</span><span class="o">[</span> <span class="err">‘</span><span class="n">lastname</span><span class="err">’</span> <span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">contact</span><span class="o">.</span><span class="n">lastname</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">json</span><span class="o">[</span> <span class="err">‘</span><span class="n">email</span><span class="err">’</span> <span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">contact</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Quick Ref:</h2>

<h3>Matchers:</h3>

<ul>
<li>.to, .not_to, .to_not</li>
<li>be_valid</li>
<li>include()</li>
<li>eq / eql</li>
<li>not==</li>
<li>match_array - ignores order in array, contents only</li>
<li>render_template</li>
<li>redirect_to</li>
<li>be_a_new()</li>
<li>change(Contact, :count)</li>
<li>match - used whenever a regex is being compared to the actual result</li>
</ul>


<h3>Gems Used:</h3>

<ul>
<li>Launchy

<ul>
<li>opens default web browser to show what the application is rendering</li>
</ul>
</li>
<li>Faker

<ul>
<li>generates names, emails, other placeholders for factories</li>
</ul>
</li>
<li>Bundler</li>
<li>VCR for testing</li>
<li>Factory Girl

<ul>
<li>Replaces Rails’ default fixtures for feeding test data to the test suite</li>
<li><a href="https://github.com/thoughtbot/factory_girl">https://github.com/thoughtbot/factory_girl</a></li>
<li><a href="https://robots.thoughtbot.com/get-your-callbacks-on-with-factory-girl-3-3">https://robots.thoughtbot.com/get-your-callbacks-on-with-factory-girl-3-3</a></li>
</ul>
</li>
<li>github.com/railsapps/rails-composer

<ul>
<li>rails application template to automatically add spec and related config to gem file and application config files, create test db</li>
</ul>
</li>
<li>RSPEC-expectation repository on github

<ul>
<li><a href="https://github.com/rspec/rspec-expectations/blob/master/README.md">https://github.com/rspec/rspec-expectations/blob/master/README.md</a></li>
</ul>
</li>
<li>Faker

<ul>
<li><a href="http://www.rubydoc.info/gems/faker">http://www.rubydoc.info/gems/faker</a></li>
<li>Forgery- Faker alternative: <a href="https://github.com/sevenwire/forgery">https://github.com/sevenwire/forgery</a></li>
<li>ffaker- faster rewrite of faker: <a href="https://github.com/ffaker/ffaker">https://github.com/ffaker/ffaker</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If You Want to Ace the Interview, You've Got to Break a Few Eggs: The Two Egg Problem]]></title>
    <link href="http://mminute.github.io/blog/2015/09/13/two-egg-problem/"/>
    <updated>2015-09-13T15:56:08-04:00</updated>
    <id>http://mminute.github.io/blog/2015/09/13/two-egg-problem</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/lucky_egg.gif" alt="Cool Runnings Lucky Egg"></p>

<p>Someone from the previous Flatiron class (class 04-15, wish I could remember his name) sat with me and <a href="https://twitter.com/sarahsalder">Sarah</a> for a while, like, a long while sometime in the middle of August to walk us through a couple of questions that he or his classmates had been asked during technical interviews.  One was the <a href="https://en.wikipedia.org/wiki/Birthday_problem">&ldquo;Birthday Paradox&rdquo;</a> and the other was the <b><em>&ldquo;Two Egg Problem&rdquo;</em></b>.</p>

<!--more-->


<h4>The Setup:</h4>

<p>It goes something like this:
There is a 100 story building.  You have two identical eggs.  An egg, when dropped from a floor will either break or not break.  If the egg breaks when dropped from some floor &lsquo;n&rsquo; then it would have broken from every floor above that floor. If the egg does not breaks when dropped from some floor &lsquo;n&rsquo; then it would have survived the fall from every floor below the floor &lsquo;n&rsquo;.  If the egg is unbroken it can be picked up and dropped again.  What strategy should you adopt to minimize the number of egg drops it takes to find the highest floor from which an egg can be dropped without breaking.</p>

<h4>The REAL Question:</h4>

<p>The solution that interviewer is looking for optimizes for the worst case scenario, or, as phrased in the DataGenetics article linked below, &ldquo;Minimization of Maximum Regret&rdquo;.  So what does that mean?  Your solution should ensure that, in the absolute worst case scenario, finding the floor from which a dropped egg will break takes as few drops as possible.  Or, stated a bit differently, the most number of drops required to identify the floor from which the egg will break is as small as possible.</p>

<h4>The Buildup:</h4>

<p><em>First let&rsquo;s examine the &ldquo;One Egg Problem&rdquo;.</em></p>

<p>Ok, so worst case scenario is that the egg breaks only when dropped from the 100th floor.  How do we find this out?  Well, since we only have one egg to work with we have to start at the first floor (the floor above the ground floor. Let&rsquo;s do this <a href="https://en.wikipedia.org/wiki/Storey#Lift.2FElevator_buttons">European Style,</a> ok?) and work our way up one floor at a time.  If we skipped up a floor, say instead of starting on the first floor, we start on the second, and the egg breaks we can&rsquo;t know if it would have also broken when dropped from the first floor because we are out of eggs.  So, worst case scenario we have to drop that damn egg 100 times and either we get to know the inside of the elevator reeeeeeeeal well or we&rsquo;re exhausted from a 100 storey climb.</p>

<p><em>Now let&rsquo;s examine the &ldquo;Many Egg Problem&rdquo;.</em></p>

<p>So now we have infinite eggs.  Omelettes forever!!!!!!!  The problem is now a binary search, broken or unbroken after a drop.  We halve the search range after each test.  We drop an egg from floor 50 and it survives.  We now only have 50 floors to search through.  We test in the middle of the remaining floors (75) and the egg survives again.  Two drops and we&rsquo;ve narrowed the range down to 25.  We halve the range again- floor 87- and the super egg still doesn&rsquo;t break.  Three drops.  Half again, 93rd floor, egg survives. Four. And again, 96th, egg survives. Five. Again, 98, survives. Six. Again, 99, survives. Seven and we know the floor that causes the break is the 100th.</p>

<p><img src="http://mminute.github.io/images/many_egg_solution.jpg" alt="Cool Runnings Lucky Egg"></p>

<h4>The Solution:</h4>

<p><em>Back to Two Eggs.  I miss my infinite eggs already.  Later little buddies:</em></p>

<p>Ok, so we have two eggs.  Where do we start?  Let&rsquo;s just say we want to halve the search range so we drop an egg at floor 50.  It survives. So now we floor by floor.  Finally second egg drops on floor 100.  Our test took 51 drops.  That&rsquo;s a lot better than 100 like we had using only one egg but still a lot of drops.</p>

<p>Let&rsquo;s try it again but this time let&rsquo;s start at floor ten and go up by ten floor each time.  Drop @10.  Egg survives.  @20, @30, @40, @50, @60, @70, @80, @90.  That tenacious egg survives them all.  We go up 10 floor again to floor 100 and the egg breaks!  You are not indestructible my ovoid friend!  Back down to floor 91 and step up one by one until&hellip; Hey, it survives every one!  So thats 19 drops by my count. A lot better.  But what if it had broken at floor 50 instead?  That would mean drops @10, @20, @30, @40, @50, @41..@49 if the egg were to break at the 49th floor.  Sooo, 14 drops.  There&rsquo;s a bit of a gap there in the number of drops it took to reach an answer when the highest safe drop floor was 99 versus 49, and in that gap is the heart of the problem.  We want to make that distribution in the number of drops required more uniform.</p>

<p>The number of drops it takes to figure out the answer in the worst case scenario should always be the same.  That&rsquo;s the goal in making a uniform distribution.  So let&rsquo;s say that the egg drops at floor 9.  Going by tens it takes a drop at floor 10, then 1..9 for a total of 10 drops.  Now let&rsquo;s say that it breaks at floor 19.  Again going by ten it takes drops at 10, 20, 11..19 for a total of 11 drops.  If we want to create a uniform distribution in the number of drops to find the answer in the worst case scenario we have to account for the extra drop that it took to from the first case (breaks at 9) to the second case (breaks at 19).  If instead of jumping up 10 floors from 10 to 10 we instead jump up 9 floors from 10 to 19 (accounting for the extra multi-floor step) then the worst case scenario- the egg breaks at floor 18- takes drops at 10, 19, 11..18 for 10 drops again!  There, there is an even distribution!  So that&rsquo;s the trick of it.  Every time we make a multi-story leap up the building the distance that we go up should be reduced by one in order to account for the additional drop.</p>

<p>Now that we have the concept of it we can go a little more abstract. If we call the first floor from which we drop an egg &lsquo;n&rsquo; then the next floor from which we drop an egg should be n-1 above the first drop point.  The one after that should be n-2 above the last and so on.  So it end up looking something like:</p>

<p><strong>n + (n-1) + (n-2) + (n-3) + &hellip; + 1 >= (number of floors in the building)</strong></p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/1/1c/First_six_triangular_numbers.svg" alt="Triangular Number Image"></p>

<p>This summation is identical to the formula for <a href="https://en.wikipedia.org/wiki/Triangular_number">Triangular Numbers</a> which simplifies to <strong>n(n+1)/2</strong>.  So, I guess it&rsquo;s assumed that you would know this.  Don&rsquo;t ask me why.  For 100 floors that&rsquo;s <strong>100 = n(n+1)/2</strong> which is equivalent to <strong>n<sup>2</sup> + n - 200</strong>.  If you solve that equation for n using the quadratic equation you get ~ 13.65. Let&rsquo;s round that up to 14 since we are working with whole floors.  So, after all that, our strategy is to drop the egg at floor 14 (n), 27 (n + n-1), 39, 50, 60, 69, 77, 84, 90, 95, and 100.  Every worst case scenario requires 14 drops and we are done!</p>

<p><img src="http://mminute.github.io/images/two_egg_solution.jpg" alt="Cool Runnings Lucky Egg"></p>

<p><a href="http://datagenetics.com/blog/july22012/index.html">
  DataGenetics- The Two Egg Probem
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://mminute.github.io/blog/2015/08/24/finite-state-machines/"/>
    <updated>2015-08-24T14:52:25-04:00</updated>
    <id>http://mminute.github.io/blog/2015/08/24/finite-state-machines</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/THESTATEMTVLOGO.png" width="400"></p>

<h1><-MACHINE-></h1>

<p>&ldquo;Finite State Machines&rdquo; is one of those terms that I&rsquo;ve heard mentioned but never found the time to look into.  Now that I&rsquo;ve finished my three months at the Flatiron School I figured that I would give it a look.</p>

<!--more-->


<p>Finite state machines (FSM), aka Finite State Automata (ooooh, I like that better!) are machines that inhabit one of a finite number of states at a given time and answer the questions:</p>

<p>&#9;1. “What are all the distinct states of the system?”</p>

<p>&#9;2. “To what stimuli will the system respond in a given state?”</p>

<p>&#9;3. “What state will the system be in if it is presented with a given stimulus in a given state?”</p>

<p>&#9;4. “What sequence of inputs are needed so that the system will be in a particular state?”</p>

<p>A finite state machine is defined by it’s states and the triggering conditions for each transition where &lsquo;state&rsquo; describes the status of a system waiting to execute a transition and a &lsquo;transition&rsquo; is a set of actions to be executed when a condition is fulfilled or when an event is received. Some FSM also allow an action to be associated with a state.  An entry action is an action executed when transitioning <em>into</em> a state while an exit action executes when transitioning to a new state.</p>

<h2>So What Does All That Mean?</h2>

<p><img src="http://mminute.github.io/images/traffic_light_FSM.png" width="400"></p>

<p>This is my (albeit new and limited) understanding of the purpose of a finite state automata:  <strong>it can control what inputs an object responds to at a given time and change the response to those same inputs based on the object state</strong> which is determined by actions that have been executed on that object in the past.</p>

<p>Let&rsquo;s look at the diagram above representing a stop light.  We&rsquo;ll start at the red light (S1).  In this example the traffic light can receive only input from the timer.  Any input from the timer to the light less than 20 fails to satify the condition required for the light to transition from red to green so the light will remain red.  A timer input == 20 causes the traffic light to transition.  The transition from red to green executes an action to reset (exit action of red state) and start the timer (entry action of green state).  The timer again send inputs to the traffic light.  This time the traffic light will not respond until the timer input == 15, at which point the light will transition from green to yellow and once again reset and start the timer.  The timer inputs now do not satisfy the conditions to transition until until the timer input == 5 which triggers a transition to our start point of the red light and yet again resets and starts the timer.</p>

<h3>So Here Is My Attempt At Another Simplified Example</h3>

<p><img src="http://mminute.github.io/images/FSM_Transmission.png" width="800"></p>

<p>We have an imaginary car with an imaginary transmission.  It is a four speed transmission with a neutral gear (If you want to parallel park this imaginary car go ahead, hop out and push it.  Imagination doesn&rsquo;t weigh much.) which means the transmission can be in one of five possible states.</p>

<p>[:neutral, :first, :second, :third, :fourth] - <strong><em>“What are all the distinct states of the system?”</em></strong></p>

<p>The driver can give the transmission inputs to shift_up or shift_down and the transmission will behave just as you would expect.  1st gear can accept an input to shift up or shift down.  So can second and third.</p>

<p>The ends are where it gets a bit more interesting.  The tranmission will respond to an input to shift_up but it will not respond to an input to shift_down when it is in a :neutral state.  Similarly, when the transmisson is in a state of :fourth it will only respond to an input of shift_down; shift_up will have no effect.  This answers the question <strong><em>“To what stimuli will the system respond in a given state?”</em></strong></p>

<p>So, no entry or exit actions, only one input (binary +/-) but I think it qualifies as a simple state machine.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">TransmissionStateMachine</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:state</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">TransmissonStates</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:neutral</span><span class="p">,</span> <span class="ss">:first</span><span class="p">,</span> <span class="ss">:second</span><span class="p">,</span> <span class="ss">:third</span><span class="p">,</span> <span class="ss">:fourth</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:neutral</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">shift_up</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">state</span> <span class="o">!=</span> <span class="ss">:fourth</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="no">TransmissonStates</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@state</span> <span class="o">=</span> <span class="no">TransmissonStates</span><span class="o">[</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Shifted up to </span><span class="si">#{</span><span class="n">state</span><span class="si">}</span><span class="s2"> gear!&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;You&#39;re in top gear dummy!&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">shift_down</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">state</span> <span class="o">!=</span> <span class="ss">:neutral</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="no">TransmissonStates</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@state</span> <span class="o">=</span> <span class="no">TransmissonStates</span><span class="o">[</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Shifted down to </span><span class="si">#{</span><span class="n">state</span><span class="si">}</span><span class="s2"> gear!&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;I can&#39;t go any lower down!  Is there a negative 1 gear?!?&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="no">TransmissionStateMachine</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Ready to go!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_up</span> <span class="c1">#Shifted up to first gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_up</span> <span class="c1">#Shifted up to second gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_up</span> <span class="c1">#Shifted up to third gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_up</span> <span class="c1">#Shifted up to fourth gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_up</span> <span class="c1">#You&#39;re in top gear dummy!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_down</span> <span class="c1">#Shifted down to third gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_down</span> <span class="c1">#Shifted down to second gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_down</span> <span class="c1">#Shifted down to first gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_down</span> <span class="c1">#Shifted down to neutral gear!</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">shift_down</span> <span class="c1">#I can&#39;t go any lower down!  Is there a negative 1 gear?!?</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.quora.com/What-are-applications-of-finite-state-machines">
So where are finite state machines used?
</a></p>

<p>&#9;- A compiled regexp is a finite state machine.</p>

<p>&#9;- Network protocols which are state based like TCP.</p>

<p>&#9;- Lexical analyzer or token parser: It uses FSM to parse tokens into keywords or identifiers which are further used by the compiler.</p>

<p>&#9;- Vending machines.</p>

<p>&#9;- Video game AI.</p>

<p>&#9;- CPU controllers.</p>

<h2>Sources:</h2>

<p><a href="https://www.youtube.com/watch?v=hJIST1cEf6A">
Finite State Machines Explained- Video
</a>
<a href="http://people.cs.vt.edu/~kafura/ComputationalThinking/Class-Notes/FSM.pdf">
Finite State Machines- A Short Explanation
</a>
<a href="http://www.cs.princeton.edu/courses/archive/spr06/cos116/FSM_Tutorial.pdf">
How To Design A Finite State Machine
</a>
<a href="http://www.sitepoint.com/state-machines-in-ruby/">
State Machines in Ruby by Dave Kennedy
</a>
<a href="https://github.com/pluginaweek/state_machine">
State Machine Gem
</a>
<a href="http://web.cs.ucdavis.edu/~rogaway/classes/120/spring13/eric-applications.pdf">
Finite State Machine Applications
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Didn't Write a Blog Post for Today So Here Are Some Pictures of Animals]]></title>
    <link href="http://mminute.github.io/blog/2015/08/11/i-didnt-write-a-blog-post-for-today-so-here-are-some-pictures-of-animals/"/>
    <updated>2015-08-11T08:46:08-04:00</updated>
    <id>http://mminute.github.io/blog/2015/08/11/i-didnt-write-a-blog-post-for-today-so-here-are-some-pictures-of-animals</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/siberian-hamster-pic-so-cute-animal-pictures-image-600x472.jpg" /></p>

<!--more-->


<p><img src="http://mminute.github.io/images/259758xcitefun-cute-animals-0.jpg" /></p>

<p><img src="http://mminute.github.io/images/tumblr-jpg.jpg" /></p>

<p><img src="http://mminute.github.io/images/02.jpg" /></p>

<p><img src="http://mminute.github.io/images/catduck.jpg" /></p>

<p><img src="http://mminute.github.io/images/Beautiful-Pictures-Of-Cute-Animals-6.jpg" /></p>

<p><img src="http://mminute.github.io/images/Top-30-most-funniest-and-humorous-animals-pictures.-25.jpg" /></p>

<p><img src="http://mminute.github.io/images/funny_animal_pictures_18.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3Dify Yourself: Three.js]]></title>
    <link href="http://mminute.github.io/blog/2015/07/25/3dify-yourself-three-dot-js/"/>
    <updated>2015-07-25T18:23:44-04:00</updated>
    <id>http://mminute.github.io/blog/2015/07/25/3dify-yourself-three-dot-js</id>
    <content type="html"><![CDATA[<p><img src="http://mminute.github.io/images/french-bulldog-with-3d-glasses-retales-botijero.png" /></p>

<p><a href="http://threejs.org/"><strong>Three.js</strong></a> is a Javascript library designed to be used to render 3D objects and animations in the browser using <a href="https://www.khronos.org/webgl/">WebGL.</a>  It allows you to create animations without relying on proprietary plugins using the end-users GPU and as well as providing a bunch of classes and functions to let you skip a whole bunch of programming and move straight to the animating.</p>

<!--more-->


<p>It breaks down into four basic components:</p>

<ul>
<li><a href="http://threejs.org/docs/index.html#Reference/Scenes/Scene"><strong>A Scene</strong></a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></li>
<li><a href="http://threejs.org/docs/index.html#Reference/Cameras/PerspectiveCamera"><strong>A Camera</strong></a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span> <span class="mi">75</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">1000</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></li>
<li><a href="http://threejs.org/docs/index.html#Reference/Renderers/WebGLRenderer"><strong>A Renderer</strong></a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">renderer</span><span class="p">.</span><span class="nx">setSize</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="p">);</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">domElement</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">renderer</span><span class="p">.</span><span class="nx">setClearColor</span><span class="p">(</span> <span class="mh">0xffffff</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></li>
<li><a href="http://threejs.org/docs/index.html#Reference/Core/Geometry
"><strong>One or more geometric objects</strong></a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>      <span class="kd">var</span> <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BoxGeometry</span><span class="p">(</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.25</span> <span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">(</span> <span class="p">{</span> <span class="nx">color</span><span class="o">:</span> <span class="mh">0x00ff00</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">cube</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="nx">cube</span> <span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></li>
<li><strong>A Render function</strong>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>      <span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="nx">requestAnimationFrame</span><span class="p">(</span> <span class="nx">render</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">$direction</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">$counter</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">){</span><span class="nx">cube</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.03</span><span class="p">;</span> <span class="nx">$counter</span><span class="o">++</span><span class="p">}</span>
</span><span class='line'>          <span class="k">else</span><span class="p">{</span><span class="nx">$direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">$counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">$counter</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">){</span><span class="nx">cube</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="mf">0.03</span><span class="p">;</span> <span class="nx">$counter</span><span class="o">++</span><span class="p">}</span>
</span><span class='line'>          <span class="k">else</span><span class="p">{</span><span class="nx">$direction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">$counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">cube</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mf">0.01</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">cube</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.01</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">scene</span><span class="p">,</span> <span class="nx">camera</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></li>
</ul>


<p>The scene, camera, and geometry are pretty self explanatory (though you try putting together some advanced geometries if you think it&rsquo;s so easy!).  The renderer does all the heavy lifting to display your magnificent creation, but the fun happens in the render function.  This is where your talent and skill come into play on the game grid you master of space and motion, you.  Within the render function is where you can do things like move, rotate, and deform objects.  <a href="http://threejs.org/docs/#Reference/Core/Object3D">Go on, get crazy with your bad self!</a>  The documentation is a bit cumbersome to traverse but given more time an effort than I feel like putting into this right now you can create some pretty impressive stuff.  Like this:</p>

<p><a href="http://hexgl.bkcore.com/"><img src="http://mminute.github.io/images/gameDemoScreenShot.png" /></a></p>

<p>Here&rsquo;s the quick animation that I played with.  It&rsquo;s basically the code from the Three.js &lsquo;Getting Started&rsquo; but I tweaked a couple different things until I got tired and settled on a bouncing cube.</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">My</span> <span class="nx">first</span> <span class="nx">Three</span><span class="p">.</span><span class="nx">js</span> <span class="nx">app</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">style</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">body</span> <span class="p">{</span> <span class="nx">margin</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>          <span class="nx">canvas</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span><span class="p">;</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/style&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;js/three.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span> <span class="mi">75</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">1000</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">renderer</span><span class="p">.</span><span class="nx">setSize</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="p">);</span>
</span><span class='line'>          <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">domElement</span> <span class="p">);</span>
</span><span class='line'>          <span class="nx">renderer</span><span class="p">.</span><span class="nx">setClearColor</span><span class="p">(</span> <span class="mh">0xffffff</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BoxGeometry</span><span class="p">(</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.25</span> <span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">(</span> <span class="p">{</span> <span class="nx">color</span><span class="o">:</span> <span class="mh">0x00ff00</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">cube</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'>          <span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="nx">cube</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">$direction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">$counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">requestAnimationFrame</span><span class="p">(</span> <span class="nx">render</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">$direction</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="nx">$counter</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">){</span><span class="nx">cube</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.03</span><span class="p">;</span> <span class="nx">$counter</span><span class="o">++</span><span class="p">}</span>
</span><span class='line'>              <span class="k">else</span><span class="p">{</span><span class="nx">$direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">$counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="nx">$counter</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">){</span><span class="nx">cube</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="mf">0.03</span><span class="p">;</span> <span class="nx">$counter</span><span class="o">++</span><span class="p">}</span>
</span><span class='line'>              <span class="k">else</span><span class="p">{</span><span class="nx">$direction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">$counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">cube</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mf">0.01</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">cube</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="mf">0.01</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">scene</span><span class="p">,</span> <span class="nx">camera</span><span class="p">);</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">render</span><span class="p">();</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/html&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<p>  The animation may be simple but that isn&rsquo;t much code for a rendered scene.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primes With Regex]]></title>
    <link href="http://mminute.github.io/blog/2015/07/08/primes-with-regex/"/>
    <updated>2015-07-08T09:04:52-04:00</updated>
    <id>http://mminute.github.io/blog/2015/07/08/primes-with-regex</id>
    <content type="html"><![CDATA[<p>I ran across a blog post explaining how you can use regular expressions to determine if a number is prime.  It seems like an odd use and it has been a while (kinda? Like four whole weeks!) since I’ve used regular expressions so it took a a bit of time and a whole lot of whiteboard space to figure out what was happening so this is the post topic that you’re getting god dammit!</p>

<!--more-->


<p>So how about I show you what it looks like before we step through it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def primes_with_regex?(num)
</span><span class='line'>  num_as_1s = "1" * num
</span><span class='line'>  ! /^1?$|^(11+?)\1+$/.match(num_as_1s)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Or, more succinctly:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def primes_with_regex?(num)
</span><span class='line'>   ("1" * num) !~ /^1?$|^(11+?)\1+$/
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Here’s how it works, broken down piece by piece:</p>

<ul>
<li><p>Create a string composed of “1” (or really any character) of length ‘num’.</p></li>
<li><p>‘!’ negates the matching condition.  If we find a match for either of our two regular expressions then the number passed to our method is not a prime and the method returns false.</p>

<p><strong>&ndash;>!&lt;&ndash;</strong> /^1?$|^(11+?)\1+$/.match(num_as_1s)</p></li>
<li><p>Check to see if the number passed to the method is zero or one.  These numbers are not prime so our method should return false.</p>

<p>! /<strong>&ndash;>^1?$&lt;&ndash;</strong>|^(11+?)\1+$/.match(num_as_1s)</p>

<ul>
<li>‘<strong>^</strong>’ anchors the expression to the beginning of the string</li>
<li>‘<strong>1?</strong>’ uses the ‘lazy’ quantifier to match zero or one occurrences of ‘1’.</li>
<li>‘<strong>$</strong>’ checks that the zero or one occurrences of ‘1’ are also anchored to the end of the string.</li>
<li>If ‘1’ occurs either zero or one times and is anchored to both the beginning and the end of the string the regular expression will match and, though our negation, our method will return false thereby correctly stating that the numbers 1 and 0 are not prime.</li>
</ul>
</li>
<li><p>Checks to see if the string of ‘1’s can be evenly divided into groups of some length n.</p>

<p>  ! /^1?$|<strong>&ndash;>^(11+?)\1+$&lt;&ndash;</strong>/.match(num_as_1s)</p>

<ul>
<li><p>The regular expression will match (and, through negation, our method will return false) if the string can be every divided into groups.  If the string can be evenly divided into segments of length n then the repetition of the groups will naturally abut the beginning and the end of the string, thereby satisfying the beginning and end anchor conditions.</p>

<p>! /^1?$|^<strong>&ndash;>(11+?)&lt;&ndash;</strong>\1+$/.match(num_as_1s)</p></li>
<li><p>Creates a matching group of two or more ‘1’s lazily.  I think of the ‘?’ as being generous more than lazy.  If a subsequent portion of the regular expression could use some of the characters that it has grabbed to match and the loss of those characters will not cause the first portion to no longer match, then it will generously give those characters away to make the entirety of the expression return true.  All for one and one for all!!!  This matching group is then stored as something like “Matching Group 1” as shown below.</p>

<p>! /^1?$|^(11+?)<strong>&ndash;>\1&lt;&ndash;</strong>+$/.match(num_as_1s)</p></li>
</ul>


<p>Here is an example of a capturing group that may make the concept more clear:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(\d\d) + (\d\d) = \2 + \1 matches &ldquo;12 + 65 = 65 + 12&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><p>Mushes together one or more occurrences of the matching group in an effort to create a collection of them that abut the beginning and end of the string.</p>

<p>! /^1?$|^(11+?)\1<strong>&ndash;>+&lt;&ndash;</strong>$/.match(num_as_1s)</p></li>
</ul>
</li>
</ul>


<p>So what does it actually do?</p>

<p><img src="http://mminute.github.io/images/Primes_w_regex.png" /></p>

<p>That’s cute, but should I use it?
No!  Why would you determine primes using a string like some kind of asshole?  Computers are good with numbers.  Just let ‘em do their thing.  That’s not just my opinion.  Shakira said that hip’s don’t lie.  Neither does benchmark.  Let’s see what it says:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Benchmark.bmbm do |x|
</span><span class='line'>  x.report("Prime_w_Regex") { for i in 0..999 do
</span><span class='line'>                                prime_with_regex?(i)
</span><span class='line'>                              end}
</span><span class='line'>
</span><span class='line'>  x.report("Prime_by_Math")  { for i in 0..999 do
</span><span class='line'>                                is_prime?(i)
</span><span class='line'>                               end}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  x.report("Prime_by_Prime_Mod")  { for i in 0..999 do
</span><span class='line'>                                      Prime.prime?(i)
</span><span class='line'>                                    end}
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Rehearsal ------------------------------------------------------
</span><span class='line'>Prime_w_Regex        0.170000   0.000000   0.170000 (  0.172319)
</span><span class='line'>Prime_by_Math        0.000000   0.000000   0.000000 (  0.003190)
</span><span class='line'>Prime_by_Prime_Mod   0.000000   0.000000   0.000000 (  0.002690)
</span><span class='line'>--------------------------------------------- total: 0.170000sec
</span><span class='line'>
</span><span class='line'>                         user     system      total        real
</span><span class='line'>Prime_w_Regex        0.170000   0.000000   0.170000 (  0.172192)
</span><span class='line'>Prime_by_Math        0.000000   0.000000   0.000000 (  0.002153)
</span><span class='line'>Prime_by_Prime_Mod   0.010000   0.000000   0.010000 (  0.002359)</span></code></pre></td></tr></table></div></figure>


<p>So that only took, like 72 times as long.  Sooooooo, novelty much? Try adding an extra zero to those ranges and running the test again.  Just try it, I&rsquo;ll wait&hellip;</p>

<h3>Sources:</h3>

<p>  <strong>The Blog:</strong></p>

<p>  <a href="http://www.noulakaz.net/2007/03/18/a-regular-expression-to-check-for-prime-numbers/">http://www.noulakaz.net/2007/03/18/a-regular-expression-to-check-for-prime-numbers/</a></p>

<p>  <strong>Regex Cheatsheet (More Quantifiers):</strong></p>

<p>  <a href="http://www.rexegg.com/regex-quickstart.html">http://www.rexegg.com/regex-quickstart.html</a></p>

<p>  <strong>Pickaxe- Regular Expressions- p.100</strong></p>

<p>  Thomas, Dave. Programming Ruby 1.9 &amp; 2.0: The Pragmatic Programmers' Guide. 2013</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a Valueless Gem]]></title>
    <link href="http://mminute.github.io/blog/2015/06/27/how-to-build-a-valueless-gem/"/>
    <updated>2015-06-27T21:27:11-04:00</updated>
    <id>http://mminute.github.io/blog/2015/06/27/how-to-build-a-valueless-gem</id>
    <content type="html"><![CDATA[<p><img src="http://www.nysun.com/pics/6372.jpg" width="500" height="500" title="Tracy Hall" alt="H. Tracy Hall with his synthetic diamond machine."></p>

<p>What are gems made out of?  Code.  (dammit Avi…)</p>

<p>I realized the other day that, while I’ve been using gems for awhile now I didn’t actually know what goes into building and publishing one.  Let’s fix that.</p>

<!--more-->


<h3>What is a Gem?</h3>

<p>A gem is the standard format for distributing Ruby programs and libraries, typically through the RubyGems package manager.</p>

<h3>OK, so let’s make one.</h3>

<p>Fine (pushy…).</p>

<p>I started out writing out the steps to properly set up your file structure and build your gem.  It looked something like this:</p>

<p><strong>I.Create a directory with the name of your gem.</strong></p>

<p>It should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root
</span><span class='line'>├── bin
</span><span class='line'>├── lib
</span><span class='line'>└── test</span></code></pre></td></tr></table></div></figure>


<p>Ruby Gem Naming convention as per RubyGems.org:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GEM NAME                       REQUIRE STATEMENT                   MAIN CLASS OR MODULE
</span><span class='line'>ruby_parser                    require 'ruby_parser'               RubyParser
</span><span class='line'>rdoc-data                      require 'rdoc/data'                 RDoc::Data
</span><span class='line'>net-http-persistent            require 'net/http/persistent'       Net::HTTP::Persistent
</span><span class='line'>net-http-digest_auth           require 'net/http/digest_auth'      Net::HTTP::DigestAuth</span></code></pre></td></tr></table></div></figure>


<p><strong>II. WRITE YO CODE!</strong></p>

<p>And put it in the ‘lib’ folder.  The convention is to have one Ruby file with the name of your gem, since that will be what is loaded when someone requires your gem.  This file is in charge of setting up your gem’s code and application program interface.</p>

<p><em>Require additional files:</em></p>

<ul>
<li>These should go into a subfolder within lib named for the gem and required in your main gem file.  These dependencies will also be listed in your gem spec.  We’ll get to that in a bit.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>└── lib
</span><span class='line'>├── poezix
</span><span class='line'>│  └── more_poezix.rb
</span><span class='line'>└── poezix.rb</span></code></pre></td></tr></table></div></figure>


<p><strong>III. Build the gemspec.</strong></p>

<p>The gem spec contains all the information about your gem.  Who made it, what it’s for, its version, homepage, yada yada yada.  It’s al in the gemspec.  You can even make a gem without filling out the  required attributes of your gem in a gem spec file.  So it’s kinda important.</p>

<p><strong>IV. Build the gem:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem build poezix.gemspec</span></code></pre></td></tr></table></div></figure>


<p><strong>V. Install the gem locally.</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install ./poezix-0.0.1.gem</span></code></pre></td></tr></table></div></figure>


<p><strong>VI. Test yo ish!</strong></p>

<p>You don’t want to send out non-functional code with all your contact info in it.  Include a test suite and documentation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Rakefile
</span><span class='line'>├── poezix.gemspec
</span><span class='line'>├── bin
</span><span class='line'>│   └── poezix
</span><span class='line'>├── lib
</span><span class='line'>│   ├── poezix
</span><span class='line'>│   │   └── more_poezix.rb
</span><span class='line'>│   └── poezix.rb
</span><span class='line'>└── test
</span><span class='line'>    └── test_poezix.rb</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% irb
</span><span class='line'>>> require 'poezix'
</span><span class='line'>#=> true
</span><span class='line'>“twice”.upon_a_midnight_dreary{puts ‘Nevermore!’}
</span><span class='line'>#=> Nevermore!
</span><span class='line'>#=> Nevermore!</span></code></pre></td></tr></table></div></figure>


<p><strong>VII. Document your code with RDoc, Yard, or something similar.</strong></p>

<p><strong>VIII. Publish!</strong></p>

<p>Create an account at ruby gems.org.</p>

<p>Setup your account on your computer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -u qrush https://rubygems.org/api/v1/api_key.yaml>~/.gem/credentials; chmod 0600 ~/.gem/credentials</span></code></pre></td></tr></table></div></figure>


<p>Push your gem to the interwebs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem push poezix-0.0.1.gem</span></code></pre></td></tr></table></div></figure>


<h3>Now Ignore All of That and Do This Instead:</h3>

<p>Why?  because it’s faster, easier, and idiot-proof.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle gem your_gem_name</span></code></pre></td></tr></table></div></figure>


<p>Oh, look!  It made just about everything you need and it even included hints of what to put where in the files that Bundler created for you.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>poezix
</span><span class='line'>├── .gitignore
</span><span class='line'>├── Gemfile
</span><span class='line'>├── LICENSE.txt
</span><span class='line'>├── README.md
</span><span class='line'>├── Rakefile
</span><span class='line'>├── poezix.gemspec
</span><span class='line'>└── lib
</span><span class='line'>    ├── poezix
</span><span class='line'>    │   └── version.rb
</span><span class='line'>    └── poezix.rb</span></code></pre></td></tr></table></div></figure>


<p>Hey!  Look!  A TODO list!</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno"> 1</span> <span class="c1"># coding: utf-8</span>
<span class="lineno"> 2</span> <span class="n">lib</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
<span class="lineno"> 3</span> <span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span> <span class="k">unless</span> <span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span>
<span class="lineno"> 4</span> <span class="nb">require</span> <span class="s1">&#39;test_gem/version&#39;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">spec</span><span class="o">|</span>
<span class="lineno"> 7</span>   <span class="n">spec</span><span class="o">.</span><span class="n">name</span>          <span class="o">=</span> <span class="s2">&quot;test_gem&quot;</span>
<span class="lineno"> 8</span>   <span class="n">spec</span><span class="o">.</span><span class="n">version</span>       <span class="o">=</span> <span class="no">TestGem</span><span class="o">::</span><span class="no">VERSION</span>
<span class="lineno"> 9</span>   <span class="n">spec</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;user_name&quot;</span><span class="o">]</span>
<span class="lineno">10</span>   <span class="n">spec</span><span class="o">.</span><span class="n">email</span>         <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;user_email@some_mail.com&quot;</span><span class="o">]</span>
<span class="lineno">11</span> 
<span class="lineno">12</span>   <span class="n">spec</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{TODO: Write a short summary, because Rubygems requires one.}</span>
<span class="lineno">13</span>   <span class="n">spec</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{TODO: Write a longer description or delete this line.}</span>
<span class="lineno">14</span>   <span class="n">spec</span><span class="o">.</span><span class="n">homepage</span>      <span class="o">=</span> <span class="s2">&quot;TODO: Put your gem&#39;s website or public repo URL here.&quot;</span>
<span class="lineno">15</span>   <span class="n">spec</span><span class="o">.</span><span class="n">license</span>       <span class="o">=</span> <span class="s2">&quot;MIT&quot;</span>
<span class="lineno">16</span> 
<span class="lineno">17</span>   <span class="c1"># Prevent pushing this gem to RubyGems.org by setting &#39;allowed_push_host&#39;, or</span>
<span class="lineno">18</span>   <span class="c1"># delete this section to allow pushing this gem to any host.</span>
<span class="lineno">19</span>   <span class="k">if</span> <span class="n">spec</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:metadata</span><span class="p">)</span>
<span class="lineno">20</span>     <span class="n">spec</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="s1">&#39;allowed_push_host&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;TODO: Set to &#39;http://mygemserver.com&#39;&quot;</span>
<span class="lineno">21</span>   <span class="k">else</span>
<span class="lineno">22</span>     <span class="k">raise</span> <span class="s2">&quot;RubyGems 2.0 or newer is required to protect against public gem pushes.&quot;</span>
<span class="lineno">23</span>   <span class="k">end</span>
<span class="lineno">24</span> 
<span class="lineno">25</span>   <span class="n">spec</span><span class="o">.</span><span class="n">files</span>         <span class="o">=</span> <span class="sb">`git ls-files -z`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\x0</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">%r{^(test|spec|features)/}</span><span class="p">)</span> <span class="p">}</span>
<span class="lineno">26</span>   <span class="n">spec</span><span class="o">.</span><span class="n">bindir</span>        <span class="o">=</span> <span class="s2">&quot;exe&quot;</span>
<span class="lineno">27</span>   <span class="n">spec</span><span class="o">.</span><span class="n">executables</span>   <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^exe/}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
<span class="lineno">28</span>   <span class="n">spec</span><span class="o">.</span><span class="n">require_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lib&quot;</span><span class="o">]</span>
<span class="lineno">29</span> 
<span class="lineno">30</span>   <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;bundler&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.10&quot;</span>
<span class="lineno">31</span>   <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rake&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 10.0&quot;</span>
<span class="lineno">32</span>   <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rspec&quot;</span>
<span class="lineno">33</span> <span class="k">end</span></code></pre></div>


<p>Now write your ruby, fill out your gem spec and readme, build your gem, write some tests, test your gem, and publish your fancy, new red rock.</p>

<p>Here’s the not all that useful gem that I built for the purposes of this gemsperiment:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno"> 1</span> <span class="nb">require</span> <span class="s2">&quot;poezix/version&quot;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="k">class</span> <span class="nc">String</span>
<span class="lineno"> 4</span>     <span class="k">def</span> <span class="nf">upon_a_midnight_dreary</span>
<span class="lineno"> 5</span>       <span class="k">if</span> <span class="nb">self</span> <span class="o">==</span> <span class="s2">&quot;once&quot;</span>
<span class="lineno"> 6</span>         <span class="mi">1</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno"> 7</span>           <span class="k">yield</span>
<span class="lineno"> 8</span>         <span class="k">end</span>        
<span class="lineno"> 9</span>       <span class="k">elsif</span> <span class="nb">self</span> <span class="o">==</span> <span class="s2">&quot;twice&quot;</span>
<span class="lineno">10</span>         <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno">11</span>           <span class="k">yield</span>
<span class="lineno">12</span>         <span class="k">end</span>
<span class="lineno">13</span>       <span class="k">elsif</span> <span class="nb">self</span> <span class="o">==</span> <span class="s2">&quot;thrice&quot;</span>
<span class="lineno">14</span>         <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno">15</span>           <span class="k">yield</span>
<span class="lineno">16</span>         <span class="k">end</span>
<span class="lineno">17</span>       <span class="k">else</span>
<span class="lineno">18</span>         <span class="k">raise</span> <span class="s2">&quot;Mayhaps an Integer you seek?&quot;</span>
<span class="lineno">19</span>       <span class="k">end</span>
<span class="lineno">20</span>     <span class="k">end</span>
<span class="lineno">21</span> <span class="k">end</span>
<span class="lineno">22</span> 
<span class="lineno">23</span> 
<span class="lineno">24</span> <span class="k">class</span> <span class="nc">Integer</span>
<span class="lineno">25</span>   <span class="k">def</span> <span class="nf">upon_a_midnight_dreary</span>
<span class="lineno">26</span>     <span class="nb">self</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno">27</span>       <span class="k">yield</span>
<span class="lineno">28</span>     <span class="k">end</span>
<span class="lineno">29</span>   <span class="k">end</span>
<span class="lineno">30</span> <span class="k">end</span>
<span class="lineno">31</span> 
<span class="lineno">32</span> 
<span class="lineno">33</span> 
<span class="lineno">34</span> <span class="k">def</span> <span class="nf">quoth</span><span class="p">(</span><span class="n">phrase</span> <span class="o">=</span> <span class="s2">&quot;Nevermore&quot;</span><span class="p">)</span>
<span class="lineno">35</span>   <span class="nb">puts</span> <span class="n">phrase</span><span class="o">.</span><span class="n">upcase</span> <span class="o">+</span> <span class="s2">&quot;!!!&quot;</span>
<span class="lineno">36</span> <span class="k">end</span>
<span class="lineno">37</span> 
<span class="lineno">38</span> 
<span class="lineno">39</span> <span class="c1">#Generates filler content from a text randomly selected from one of 42 poems/short stories.</span>
<span class="lineno">40</span> <span class="c1">#Takes an arguement to determine the number of line returned.</span>
<span class="lineno">41</span> 
<span class="lineno">42</span> <span class="k">def</span> <span class="nf">poesem_ipsum</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">=</span> <span class="s2">&quot;full&quot;</span><span class="p">)</span>
<span class="lineno">43</span>   <span class="n">all_texts</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;/texts/*.txt&quot;</span><span class="o">]</span>
<span class="lineno">44</span>   <span class="n">number_of_texts</span> <span class="o">=</span> <span class="n">all_texts</span><span class="o">.</span><span class="n">size</span>
<span class="lineno">45</span>   <span class="n">selection</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.number_of_texts</span><span class="p">)</span>
<span class="lineno">46</span> 
<span class="lineno">47</span>   <span class="n">text</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">all_texts</span><span class="o">[</span><span class="n">selection</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span> <span class="c1">#An Array</span>
<span class="lineno">48</span> 
<span class="lineno">49</span>   <span class="k">if</span> <span class="n">number_of_lines</span> <span class="o">==</span> <span class="s2">&quot;full&quot;</span>
<span class="lineno">50</span>     <span class="n">number_of_lines</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
<span class="lineno">51</span>   <span class="k">end</span>
<span class="lineno">52</span> 
<span class="lineno">53</span>   <span class="n">text</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.number_of_lines</span><span class="o">].</span><span class="n">join</span>
<span class="lineno">54</span> <span class="k">end</span></code></pre></div>


<p>Sources:</p>

<p>[Engineering Lunch Series] Step-by-Step Guide to Building Your First Ruby Gem
<a href="https://quickleft.com/blog/engineering-lunch-series-step-by-step-guide-to-building-your-first-ruby-gem/">https://quickleft.com/blog/engineering-lunch-series-step-by-step-guide-to-building-your-first-ruby-gem/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ENIAC Wasn't First?...]]></title>
    <link href="http://mminute.github.io/blog/2015/06/16/eniac-wasnt-first-dot-dot-dot/"/>
    <updated>2015-06-16T19:13:20-04:00</updated>
    <id>http://mminute.github.io/blog/2015/06/16/eniac-wasnt-first-dot-dot-dot</id>
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e4/Frontal_view_of_the_reconstructed_Colossus_at_The_National_Museum_of_Computing%2C_Bletchley_Park.jpg"></p>

<p>Try taking a tour of an engineering building at Penn without someone telling you about how ENIAC was the first digital computer.  Seriously, try it.  I bet you a million dollars they mention it.  Seriously, bet me.  Please?  I could use the cash or there may be a significant increase in my ramen consumption quite shortly.  No?  Fine.  Whatever.</p>

<p>I believed those professors and tour guides because 1) I figured that they knew what they were talking about, and 2) I’d seen it in books.  Everything in books is true, right? #bible.  Turns out tour_guides.liar_liar_pants_on_fire? returns true.</p>

<!--more-->


<p>There is a YouTube channel called ‘Computerphile’ that puts out videos digging down into some of the minutiae of the history and inner workings of those magical thinking boxes that we all carry around.  Ever wonder about the discrete cosine transformation used to encode jpeg images or the significance of the Altair 8800? No?  Well if you did you could hear all about it from experts in the fields.  It, along with it’s sister channel ‘Numberphile’, are worth a look.</p>

<p>Anyway, back to the issue at hand… I ran across one of Computerphile’s vids this past Monday.  The topic: Colossus, the world’s first (at least partially) programmable electronic digital computer.  The prototype, Colossus Mk 1 was operational in December of 1943 and put into service February 5, 1944, preceding ENIAC (completed in November of 1945) by nearly two years.  Bonus points for having a way better name.</p>

<iframe width="760" height="488" src="https://www.youtube.com/embed/9HH-asvLAj4" frameborder="0" allowfullscreen></iframe>


<p>The Colossus was designed and built by engineer Tommy Flowers, assisted by William Chandler, with Sidney Broadhurst working on the auxiliary electromechanical parts at the Government Code and Cypher School (GC&amp;CS) in Bletchley Park in order to break the cryptography of the Lorenz SZ42 cipher machine used to encrypt messages transmitted by the German High Command and Army Commands.  Though the better known Enigma was more common (due to its greater portability), it was used more in the transmission of tactical information, while the Lorenz, a far more complex cipher, was used to securely transmit information of a more strategic nature; ‘securely’ at least until Colossus came along.</p>

<p>Colossus was the first example of program-controlled logic, parallel processing, variable programming, hardware interrupts, optical reading of punched paper tape, and shift registers, all concepts that would become critical in the future development of computing.</p>

<p>It is worth taking a moment to note how much more complex the challenge was facing Colossus in comparison to the challenge facing Turing’s ‘Victory' (not ‘Christoper’, sorry Cumberbatch) electromechanical computer.</p>

<p>Enigma:
3 rotors (Army and Air Force) or 4 rotors (Navy) with 26 settings each.  The three rotor version could be configured in:
158,962,555,217,826,360,000 different ways.  Thats 159 million million million.</p>

<p>Lorenz:
12 Rotors, each with a different number of possible settings.</p>

<p>Rotor Number => Possible settings.</p>

<p>{1=> 43, 2=> 47, 3=> 51, 4=> 53, 5=> 59, 6=> 37, 7=> 61, 8=> 41, 9=> 31, 10=> 29, 11=> 26, 12=> 23}
which combined to form:
104, 970,795,887,142, 501,519,944,408, 859,713,937,438, 238,568,341,584, 154,526,205,632, 598,745,732,639, 647,278,021,173, 163,831,071,764, 896,225,159,592, 365,198,842,461, 226,688,733,330, 753,486,243,770, 471,723,522,422, 795,262,754,816 different possible settings.</p>

<p>100 million million million million million million million million million million million million million million million million million million million million million million million million million million million million. POSSIBLE. SETTING.</p>

<p>In scientific notation thats written as 1.04 x 10<sup>shit-ton</sup>.</p>

<p>And to compare the two, the Lorenz could be set to: 660,349, 198,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000 TIMES more combinations than the Enigma.</p>

<p>660,349 million million million million million million million million million million million million million million million million million million million million million million million million.  TIMES. MORE.</p>

<p> Yeeeeesh.</p>

<p>So why haven’t we heard of Colossus?  Well, it was highly classified through the late 1970’s, long after ENIAC had been revealed to the public in 1946 and hailed as the first electronic ‘Giant Brain’.  It’s hard to unseat a 30 year-old reputation.  Furthermore, Churchill ordered all but two of the 11 machines destroyed shortly after V-E Day in 1945.  The remaining machines were used for training and research purposes before being scrapped a number of years later.</p>

<p>As far as I can tell the only reason one might prefer ENIAC over Colossus is that it was the first example of a Turing complete machine, whatever that mean.  You’ll have to look that one up for yourself; it went a bit over my head.  Then again Professor Benjamin Wells of the Departments of Computer Science and Mathematics, University of San Francisco, has shown that a Universal Turing Machine could run on ten Colossus computers and argues that this means that Colossus satisfies the definition of Turing completeness. Soon, there’s that?</p>

<p>Sources-
This isn’t a scholarly work so I’m not going to go back and cite anything, but here are a few places that were helpful:</p>

<p><a href="http://billtuttememorial.org.uk/codebreaking/the-lorenz/">http://billtuttememorial.org.uk/codebreaking/the-lorenz/</a>
<a href="https://www.youtube.com/watch?v=9HH-asvLAj4">https://www.youtube.com/watch?v=9HH-asvLAj4</a>
<a href="http://www.wired.com/2007/09/dead-media-be-1-17/">http://www.wired.com/2007/09/dead-media-be-1-17/</a>
<a href="http://history-computer.com/ModernComputer/Electronic/Colossus.html">http://history-computer.com/ModernComputer/Electronic/Colossus.html</a>
<a href="http://cryptomuseum.com/crypto/colossus/index.htm">http://cryptomuseum.com/crypto/colossus/index.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Constants Are NOT Constant]]></title>
    <link href="http://mminute.github.io/blog/2015/06/04/my-first-post-on-octopress/"/>
    <updated>2015-06-04T21:34:41-04:00</updated>
    <id>http://mminute.github.io/blog/2015/06/04/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>The speed of light.</p>

<p>Avogadro&rsquo;s number.</p>

<p>Planck&rsquo;s constant.</p>

<p>The mass of an electron.</p>

<p>I thought that I understood constants.  Unchanging. Immutable.  Then Ruby went and fucked it up.</p>

<!--more-->


<p>My understanding of constants in Ruby was that they are represented by a capitalized bareword (often all upper case) which, once defined, would cause Ruby to pitch a fit if you were to try to reassign its value.  Makes sense, right?  So when I saw this I was a bit confused:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Shoe
</span><span class='line'>  BRANDS = []
</span><span class='line'>
</span><span class='line'>  def initialize(brand)
</span><span class='line'>    @brand = brand
</span><span class='line'>    if BRANDS.include?(@brand) == false
</span><span class='line'>    BRANDS &lt;&lt; @brand
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Wait.. whaaaaaa????</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BRANDS &lt;&lt; @brand</span></code></pre></td></tr></table></div></figure>


<p>Aren&rsquo;t we changing what BRAND represents?
Yes and no.
We are NOT changing the object to which the bareword &ldquo;BRANDS&rdquo; points.
We ARE changing the contents of that array, or what I formerly thought of as the value for &ldquo;BRANDS&rdquo;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BRANDS = []
</span><span class='line'>BRANDS.object_id #=&gt; 70132206506080
</span><span class='line'>BRANDS &lt;&lt; "LA Gear"
</span><span class='line'>BRANDS &lt;&lt; "FILA"
</span><span class='line'>BRANDS #=&gt; ["LA Gear", "FILA"]
</span><span class='line'>BRANDS.object_id #=&gt; 70132206506080</span></code></pre></td></tr></table></div></figure>


<p>But, wait!  There&rsquo;s more!</p>

<p>So, while the value of PI might be the same in your home as it is in Intercourse, Pennsylvania,  Fucking, Austria,  and Wetwang, Yorkshire UK (all real places, btw), a constant may not be the same everywhere in your code.  Let&rsquo;s try this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PIE = ["mmmmmm","piiiiiiiieeeeeee"]
</span><span class='line'>
</span><span class='line'>class TastyStuff
</span><span class='line'>  PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; ["mmmmmm","piiiiiiiieeeeeee"]</span></code></pre></td></tr></table></div></figure>


<p>So now we have two &ldquo;PIE"s?
Hello Namespacing!  How&rsquo;re the wife and kids?!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PIE = ["mmmmmm","piiiiiiiieeeeeee"]
</span><span class='line'>
</span><span class='line'>class TastyStuff
</span><span class='line'>  PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; ["mmmmmm","piiiiiiiieeeeeee"]
</span><span class='line'>TastyStuff::PIE #=&gt; ["Pecan", "Apple", "Pumpkin"]</span></code></pre></td></tr></table></div></figure>


<p>What happens if we get rid of the &ldquo;PIE&rdquo; inside the class?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>class TastyStuff
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; ["Pecan", "Apple", "Pumpkin"]</span></code></pre></td></tr></table></div></figure>


<p>But if we reverse it&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class TastyStuff
</span><span class='line'>  PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; uninitialized constant PIE (NameError)</span></code></pre></td></tr></table></div></figure>


<p>Sooooooo&hellip; now we can&rsquo;t call &ldquo;PIE&rdquo; from outside of the class?   It only works from within the class?  I guess we could call it a &lsquo;Class Constant&rsquo;?  Yeah, let&rsquo;s call it a Class Constant because, well, that&rsquo;s what it&rsquo;s called.</p>

<hr />

<p>Let&rsquo;s summarize:</p>

<ul>
<li>Constants can only be set to point to an object once.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LYRICS = ["Nah Nah Nah Nah"]
</span><span class='line'>LYRICS = ["Hey Hey Hey, Goodbye"]
</span><span class='line'>#=&gt;2: warning: already initialized constant LYRICS
</span><span class='line'>#=&gt;1: warning: previous definition of LYRICS was here</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The object to which a constant points CAN be changed.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LYRICS = ["Nah Nah Nah Nah"]
</span><span class='line'>LYRICS &lt;&lt; "Hey Hey Hey, Goodbye"
</span><span class='line'>#=&gt; ["Nah Nah Nah Nah" , "Hey Hey Hey, Goodbye"]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Constants have a scope / are namespaced.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LYRICS = ["Nah Nah Nah Nah"]
</span><span class='line'>
</span><span class='line'>class Tunes
</span><span class='line'>  LYRICS = ["Hey Hey Hey, Goodbye"]
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>LYRICS #=&gt; ["Nah Nah Nah Nah"]
</span><span class='line'>Tunes::LYRICS #=&gt; ["Hey Hey Hey, Goodbye"]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
