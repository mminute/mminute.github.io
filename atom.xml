<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A PlanarFe Adventure]]></title>
  <link href="http://mminute.github.io/atom.xml" rel="self"/>
  <link href="http://mminute.github.io/"/>
  <updated>2015-07-08T10:36:47-04:00</updated>
  <id>http://mminute.github.io/</id>
  <author>
    <name><![CDATA[Mason Jennings]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Primes With Regex]]></title>
    <link href="http://mminute.github.io/blog/2015/07/08/primes-with-regex/"/>
    <updated>2015-07-08T09:04:52-04:00</updated>
    <id>http://mminute.github.io/blog/2015/07/08/primes-with-regex</id>
    <content type="html"><![CDATA[<p>I ran across a blog post explaining how you can use regular expressions to determine if a number is prime.  It seems like an odd use and it has been a while (kinda? Like four whole weeks!) since I’ve used regular expressions so it took a a bit of time and a whole lot of whiteboard space to figure out what was happening so this is the post topic that you’re getting god dammit!</p>

<p>So how about I show you what it looks like before we step through it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def primes_with_regex?(num)
</span><span class='line'>  num_as_1s = "1" * num
</span><span class='line'>  ! /^1?$|^(11+?)\1+$/.match(num_as_1s)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Or, more succinctly:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def primes_with_regex?(num)
</span><span class='line'>   ("1" * num) !~ /^1?$|^(11+?)\1+$/
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Here’s how it works, broken down piece by piece:</p>

<ul>
<li><p>Create a string composed of “1” (or really any character) of length ‘num’.</p></li>
<li><p>‘!’ negates the matching condition.  If we find a match for either of our two regular expressions then the number passed to our method is not a prime and the method returns false.</p>

<p><strong>&ndash;>!&lt;&ndash;</strong> /^1?$|^(11+?)\1+$/.match(num_as_1s)</p></li>
<li><p>Check to see if the number passed to the method is zero or one.  These numbers are not prime so our method should return false.</p>

<p>! /<strong>&ndash;>^1?$&lt;&ndash;</strong>|^(11+?)\1+$/.match(num_as_1s)</p>

<ul>
<li>‘<strong>^</strong>’ anchors the expression to the beginning of the string</li>
<li>‘<strong>1?</strong>’ uses the ‘lazy’ quantifier to match zero or one occurrences of ‘1’.</li>
<li>‘<strong>$</strong>’ checks that the zero or one occurrences of ‘1’ are also anchored to the end of the string.</li>
<li>If ‘1’ occurs either zero or one times and is anchored to both the beginning and the end of the string the regular expression will match and, though our negation, our method will return false thereby correctly stating that the numbers 1 and 0 are not prime.</li>
</ul>
</li>
<li><p>Checks to see if the string of ‘1’s can be evenly divided into groups of some length n.</p>

<p>  ! /^1?$|<strong>&ndash;>^(11+?)\1+$&lt;&ndash;</strong>/.match(num_as_1s)</p>

<ul>
<li><p>The regular expression will match (and, through negation, our method will return false) if the string can be every divided into groups.  If the string can be evenly divided into segments of length n then the repetition of the groups will naturally abut the beginning and the end of the string, thereby satisfying the beginning and end anchor conditions.</p>

<p>! /^1?$|^<strong>&ndash;>(11+?)&lt;&ndash;</strong>\1+$/.match(num_as_1s)</p></li>
<li><p>Creates a matching group of two or more ‘1’s lazily.  I think of the ‘?’ as being generous more than lazy.  If a subsequent portion of the regular expression could use some of the characters that it has grabbed to match and the loss of those characters will not cause the first portion to no longer match, then it will generously give those characters away to make the entirety of the expression return true.  All for one and one for all!!!  This matching group is then stored as something like “Matching Group 1” as shown below.</p>

<p>! /^1?$|^(11+?)<strong>&ndash;>\1&lt;&ndash;</strong>+$/.match(num_as_1s)</p></li>
</ul>


<p>Here is an example of a capturing group that may make the concept more clear:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(\d\d) + (\d\d) = \2 + \1 matches &ldquo;12 + 65 = 65 + 12&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><p>Mushes together one or more occurrences of the matching group in an effort to create a collection of them that abut the beginning and end of the string.</p>

<p>! /^1?$|^(11+?)\1<strong>&ndash;>+&lt;&ndash;</strong>$/.match(num_as_1s)</p></li>
</ul>
</li>
</ul>


<p>So what does it actually do?</p>

<p><img src="http://mminute.github.io/images/Primes_w_regex.jpg"></p>

<p>That’s cute, but should I use it?
No!  Why would you determine primes using a string like some kind of asshole?  Computers are good with numbers.  Just let ‘em do their thing.  That’s not just my opinion.  Shakira said that hip’s don’t lie.  Neither does benchmark.  Let’s see what it says:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Benchmark.bmbm do |x|
</span><span class='line'>  x.report("Prime_w_Regex") { for i in 0..999 do
</span><span class='line'>                                prime_with_regex?(i)
</span><span class='line'>                              end}
</span><span class='line'>
</span><span class='line'>  x.report("Prime_by_Math")  { for i in 0..999 do
</span><span class='line'>                                is_prime?(i)
</span><span class='line'>                               end}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  x.report("Prime_by_Prime_Mod")  { for i in 0..999 do
</span><span class='line'>                                      Prime.prime?(i)
</span><span class='line'>                                    end}
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Rehearsal ------------------------------------------------------
</span><span class='line'>Prime_w_Regex        0.170000   0.000000   0.170000 (  0.172319)
</span><span class='line'>Prime_by_Math        0.000000   0.000000   0.000000 (  0.003190)
</span><span class='line'>Prime_by_Prime_Mod   0.000000   0.000000   0.000000 (  0.002690)
</span><span class='line'>--------------------------------------------- total: 0.170000sec
</span><span class='line'>
</span><span class='line'>                         user     system      total        real
</span><span class='line'>Prime_w_Regex        0.170000   0.000000   0.170000 (  0.172192)
</span><span class='line'>Prime_by_Math        0.000000   0.000000   0.000000 (  0.002153)
</span><span class='line'>Prime_by_Prime_Mod   0.010000   0.000000   0.010000 (  0.002359)</span></code></pre></td></tr></table></div></figure>


<p>So that only took, like 72 times as long.  Sooooooo, novelty much?</p>

<h3>Sources:</h3>

<p>  <strong>The Blog:</strong></p>

<p>  <a href="http://www.noulakaz.net/2007/03/18/a-regular-expression-to-check-for-prime-numbers/">http://www.noulakaz.net/2007/03/18/a-regular-expression-to-check-for-prime-numbers/</a></p>

<p>  <strong>Regex Cheatsheet (More Quantifiers):</strong></p>

<p>  <a href="http://www.rexegg.com/regex-quickstart.html">http://www.rexegg.com/regex-quickstart.html</a></p>

<p>  <strong>Pickaxe- Regular Expressions- p.100</strong></p>

<p>  Thomas, Dave. Programming Ruby 1.9 &amp; 2.0: The Pragmatic Programmers' Guide. 2013</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a Valueless Gem]]></title>
    <link href="http://mminute.github.io/blog/2015/06/27/how-to-build-a-valueless-gem/"/>
    <updated>2015-06-27T21:27:11-04:00</updated>
    <id>http://mminute.github.io/blog/2015/06/27/how-to-build-a-valueless-gem</id>
    <content type="html"><![CDATA[<p><img src="http://www.nysun.com/pics/6372.jpg" width="500" height="500" title="Tracy Hall" alt="H. Tracy Hall with his synthetic diamond machine."></p>

<p>What are gems made out of?  Code.  (dammit Avi…)</p>

<p>I realized the other day that, while I’ve been using gems for awhile now I didn’t actually know what goes into building and publishing one.  Let’s fix that.</p>

<h3>What is a Gem?</h3>

<p>A gem is the standard format for distributing Ruby programs and libraries, typically through the RubyGems package manager.</p>

<h3>OK, so let’s make one.</h3>

<p>Fine (pushy…).</p>

<p>I started out writing out the steps to properly set up your file structure and build your gem.  It looked something like this:</p>

<p><strong>I.Create a directory with the name of your gem.</strong></p>

<p>It should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root
</span><span class='line'>├── bin
</span><span class='line'>├── lib
</span><span class='line'>└── test</span></code></pre></td></tr></table></div></figure>


<p>Ruby Gem Naming convention as per RubyGems.org:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GEM NAME                       REQUIRE STATEMENT                   MAIN CLASS OR MODULE
</span><span class='line'>ruby_parser                    require 'ruby_parser'               RubyParser
</span><span class='line'>rdoc-data                      require 'rdoc/data'                 RDoc::Data
</span><span class='line'>net-http-persistent            require 'net/http/persistent'       Net::HTTP::Persistent
</span><span class='line'>net-http-digest_auth           require 'net/http/digest_auth'      Net::HTTP::DigestAuth</span></code></pre></td></tr></table></div></figure>


<p><strong>II. WRITE YO CODE!</strong></p>

<p>And put it in the ‘lib’ folder.  The convention is to have one Ruby file with the name of your gem, since that will be what is loaded when someone requires your gem.  This file is in charge of setting up your gem’s code and application program interface.</p>

<p><em>Require additional files:</em></p>

<ul>
<li>These should go into a subfolder within lib named for the gem and required in your main gem file.  These dependencies will also be listed in your gem spec.  We’ll get to that in a bit.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>└── lib
</span><span class='line'>├── poezix
</span><span class='line'>│  └── more_poezix.rb
</span><span class='line'>└── poezix.rb</span></code></pre></td></tr></table></div></figure>


<p><strong>III. Build the gemspec.</strong></p>

<p>The gem spec contains all the information about your gem.  Who made it, what it’s for, its version, homepage, yada yada yada.  It’s al in the gemspec.  You can even make a gem without filling out the  required attributes of your gem in a gem spec file.  So it’s kinda important.</p>

<p><strong>IV. Build the gem:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem build poezix.gemspec</span></code></pre></td></tr></table></div></figure>


<p><strong>V. Install the gem locally.</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install ./poezix-0.0.1.gem</span></code></pre></td></tr></table></div></figure>


<p><strong>VI. Test yo ish!</strong></p>

<p>You don’t want to send out non-functional code with all your contact info in it.  Include a test suite and documentation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Rakefile
</span><span class='line'>├── poezix.gemspec
</span><span class='line'>├── bin
</span><span class='line'>│   └── poezix
</span><span class='line'>├── lib
</span><span class='line'>│   ├── poezix
</span><span class='line'>│   │   └── more_poezix.rb
</span><span class='line'>│   └── poezix.rb
</span><span class='line'>└── test
</span><span class='line'>    └── test_poezix.rb</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% irb
</span><span class='line'>>> require 'poezix'
</span><span class='line'>#=> true
</span><span class='line'>“twice”.upon_a_midnight_dreary{puts ‘Nevermore!’}
</span><span class='line'>#=> Nevermore!
</span><span class='line'>#=> Nevermore!</span></code></pre></td></tr></table></div></figure>


<p><strong>VII. Document your code with RDoc, Yard, or something similar.</strong></p>

<p><strong>VIII. Publish!</strong></p>

<p>Create an account at ruby gems.org.</p>

<p>Setup your account on your computer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -u qrush https://rubygems.org/api/v1/api_key.yaml>~/.gem/credentials; chmod 0600 ~/.gem/credentials</span></code></pre></td></tr></table></div></figure>


<p>Push your gem to the interwebs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem push poezix-0.0.1.gem</span></code></pre></td></tr></table></div></figure>


<h3>Now Ignore All of That and Do This Instead:</h3>

<p>Why?  because it’s faster, easier, and idiot-proof.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle gem your_gem_name</span></code></pre></td></tr></table></div></figure>


<p>Oh, look!  It made just about everything you need and it even included hints of what to put where in the files that Bundler created for you.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>poezix
</span><span class='line'>├── .gitignore
</span><span class='line'>├── Gemfile
</span><span class='line'>├── LICENSE.txt
</span><span class='line'>├── README.md
</span><span class='line'>├── Rakefile
</span><span class='line'>├── poezix.gemspec
</span><span class='line'>└── lib
</span><span class='line'>    ├── poezix
</span><span class='line'>    │   └── version.rb
</span><span class='line'>    └── poezix.rb</span></code></pre></td></tr></table></div></figure>


<p>Hey!  Look!  A TODO list!</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno"> 1</span> <span class="c1"># coding: utf-8</span>
<span class="lineno"> 2</span> <span class="n">lib</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
<span class="lineno"> 3</span> <span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span> <span class="k">unless</span> <span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span>
<span class="lineno"> 4</span> <span class="nb">require</span> <span class="s1">&#39;test_gem/version&#39;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">spec</span><span class="o">|</span>
<span class="lineno"> 7</span>   <span class="n">spec</span><span class="o">.</span><span class="n">name</span>          <span class="o">=</span> <span class="s2">&quot;test_gem&quot;</span>
<span class="lineno"> 8</span>   <span class="n">spec</span><span class="o">.</span><span class="n">version</span>       <span class="o">=</span> <span class="no">TestGem</span><span class="o">::</span><span class="no">VERSION</span>
<span class="lineno"> 9</span>   <span class="n">spec</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;user_name&quot;</span><span class="o">]</span>
<span class="lineno">10</span>   <span class="n">spec</span><span class="o">.</span><span class="n">email</span>         <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;user_email@some_mail.com&quot;</span><span class="o">]</span>
<span class="lineno">11</span> 
<span class="lineno">12</span>   <span class="n">spec</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{TODO: Write a short summary, because Rubygems requires one.}</span>
<span class="lineno">13</span>   <span class="n">spec</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{TODO: Write a longer description or delete this line.}</span>
<span class="lineno">14</span>   <span class="n">spec</span><span class="o">.</span><span class="n">homepage</span>      <span class="o">=</span> <span class="s2">&quot;TODO: Put your gem&#39;s website or public repo URL here.&quot;</span>
<span class="lineno">15</span>   <span class="n">spec</span><span class="o">.</span><span class="n">license</span>       <span class="o">=</span> <span class="s2">&quot;MIT&quot;</span>
<span class="lineno">16</span> 
<span class="lineno">17</span>   <span class="c1"># Prevent pushing this gem to RubyGems.org by setting &#39;allowed_push_host&#39;, or</span>
<span class="lineno">18</span>   <span class="c1"># delete this section to allow pushing this gem to any host.</span>
<span class="lineno">19</span>   <span class="k">if</span> <span class="n">spec</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:metadata</span><span class="p">)</span>
<span class="lineno">20</span>     <span class="n">spec</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="s1">&#39;allowed_push_host&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;TODO: Set to &#39;http://mygemserver.com&#39;&quot;</span>
<span class="lineno">21</span>   <span class="k">else</span>
<span class="lineno">22</span>     <span class="k">raise</span> <span class="s2">&quot;RubyGems 2.0 or newer is required to protect against public gem pushes.&quot;</span>
<span class="lineno">23</span>   <span class="k">end</span>
<span class="lineno">24</span> 
<span class="lineno">25</span>   <span class="n">spec</span><span class="o">.</span><span class="n">files</span>         <span class="o">=</span> <span class="sb">`git ls-files -z`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\x0</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">%r{^(test|spec|features)/}</span><span class="p">)</span> <span class="p">}</span>
<span class="lineno">26</span>   <span class="n">spec</span><span class="o">.</span><span class="n">bindir</span>        <span class="o">=</span> <span class="s2">&quot;exe&quot;</span>
<span class="lineno">27</span>   <span class="n">spec</span><span class="o">.</span><span class="n">executables</span>   <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^exe/}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
<span class="lineno">28</span>   <span class="n">spec</span><span class="o">.</span><span class="n">require_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lib&quot;</span><span class="o">]</span>
<span class="lineno">29</span> 
<span class="lineno">30</span>   <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;bundler&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.10&quot;</span>
<span class="lineno">31</span>   <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rake&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 10.0&quot;</span>
<span class="lineno">32</span>   <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rspec&quot;</span>
<span class="lineno">33</span> <span class="k">end</span></code></pre></div>


<p>Now write your ruby, fill out your gem spec and readme, build your gem, write some tests, test your gem, and publish your fancy, new red rock.</p>

<p>Here’s the not all that useful gem that I built for the purposes of this gemsperiment:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="lineno"> 1</span> <span class="nb">require</span> <span class="s2">&quot;poezix/version&quot;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="k">class</span> <span class="nc">String</span>
<span class="lineno"> 4</span>     <span class="k">def</span> <span class="nf">upon_a_midnight_dreary</span>
<span class="lineno"> 5</span>       <span class="k">if</span> <span class="nb">self</span> <span class="o">==</span> <span class="s2">&quot;once&quot;</span>
<span class="lineno"> 6</span>         <span class="mi">1</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno"> 7</span>           <span class="k">yield</span>
<span class="lineno"> 8</span>         <span class="k">end</span>        
<span class="lineno"> 9</span>       <span class="k">elsif</span> <span class="nb">self</span> <span class="o">==</span> <span class="s2">&quot;twice&quot;</span>
<span class="lineno">10</span>         <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno">11</span>           <span class="k">yield</span>
<span class="lineno">12</span>         <span class="k">end</span>
<span class="lineno">13</span>       <span class="k">elsif</span> <span class="nb">self</span> <span class="o">==</span> <span class="s2">&quot;thrice&quot;</span>
<span class="lineno">14</span>         <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno">15</span>           <span class="k">yield</span>
<span class="lineno">16</span>         <span class="k">end</span>
<span class="lineno">17</span>       <span class="k">else</span>
<span class="lineno">18</span>         <span class="k">raise</span> <span class="s2">&quot;Mayhaps an Integer you seek?&quot;</span>
<span class="lineno">19</span>       <span class="k">end</span>
<span class="lineno">20</span>     <span class="k">end</span>
<span class="lineno">21</span> <span class="k">end</span>
<span class="lineno">22</span> 
<span class="lineno">23</span> 
<span class="lineno">24</span> <span class="k">class</span> <span class="nc">Integer</span>
<span class="lineno">25</span>   <span class="k">def</span> <span class="nf">upon_a_midnight_dreary</span>
<span class="lineno">26</span>     <span class="nb">self</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
<span class="lineno">27</span>       <span class="k">yield</span>
<span class="lineno">28</span>     <span class="k">end</span>
<span class="lineno">29</span>   <span class="k">end</span>
<span class="lineno">30</span> <span class="k">end</span>
<span class="lineno">31</span> 
<span class="lineno">32</span> 
<span class="lineno">33</span> 
<span class="lineno">34</span> <span class="k">def</span> <span class="nf">quoth</span><span class="p">(</span><span class="n">phrase</span> <span class="o">=</span> <span class="s2">&quot;Nevermore&quot;</span><span class="p">)</span>
<span class="lineno">35</span>   <span class="nb">puts</span> <span class="n">phrase</span><span class="o">.</span><span class="n">upcase</span> <span class="o">+</span> <span class="s2">&quot;!!!&quot;</span>
<span class="lineno">36</span> <span class="k">end</span>
<span class="lineno">37</span> 
<span class="lineno">38</span> 
<span class="lineno">39</span> <span class="c1">#Generates filler content from a text randomly selected from one of 42 poems/short stories.</span>
<span class="lineno">40</span> <span class="c1">#Takes an arguement to determine the number of line returned.</span>
<span class="lineno">41</span> 
<span class="lineno">42</span> <span class="k">def</span> <span class="nf">poesem_ipsum</span><span class="p">(</span><span class="n">number_of_lines</span> <span class="o">=</span> <span class="s2">&quot;full&quot;</span><span class="p">)</span>
<span class="lineno">43</span>   <span class="n">all_texts</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;/texts/*.txt&quot;</span><span class="o">]</span>
<span class="lineno">44</span>   <span class="n">number_of_texts</span> <span class="o">=</span> <span class="n">all_texts</span><span class="o">.</span><span class="n">size</span>
<span class="lineno">45</span>   <span class="n">selection</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.number_of_texts</span><span class="p">)</span>
<span class="lineno">46</span> 
<span class="lineno">47</span>   <span class="n">text</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">all_texts</span><span class="o">[</span><span class="n">selection</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span> <span class="c1">#An Array</span>
<span class="lineno">48</span> 
<span class="lineno">49</span>   <span class="k">if</span> <span class="n">number_of_lines</span> <span class="o">==</span> <span class="s2">&quot;full&quot;</span>
<span class="lineno">50</span>     <span class="n">number_of_lines</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
<span class="lineno">51</span>   <span class="k">end</span>
<span class="lineno">52</span> 
<span class="lineno">53</span>   <span class="n">text</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.number_of_lines</span><span class="o">].</span><span class="n">join</span>
<span class="lineno">54</span> <span class="k">end</span></code></pre></div>


<p>Sources:</p>

<p>[Engineering Lunch Series] Step-by-Step Guide to Building Your First Ruby Gem
<a href="https://quickleft.com/blog/engineering-lunch-series-step-by-step-guide-to-building-your-first-ruby-gem/">https://quickleft.com/blog/engineering-lunch-series-step-by-step-guide-to-building-your-first-ruby-gem/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ENIAC Wasn't First?...]]></title>
    <link href="http://mminute.github.io/blog/2015/06/16/eniac-wasnt-first-dot-dot-dot/"/>
    <updated>2015-06-16T19:13:20-04:00</updated>
    <id>http://mminute.github.io/blog/2015/06/16/eniac-wasnt-first-dot-dot-dot</id>
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e4/Frontal_view_of_the_reconstructed_Colossus_at_The_National_Museum_of_Computing%2C_Bletchley_Park.jpg"></p>

<p>Try taking a tour of an engineering building at Penn without someone telling you about how ENIAC was the first digital computer.  Seriously, try it.  I bet you a million dollars they mention it.  Seriously, bet me.  Please?  I could use the cash or there may be a significant increase in my ramen consumption quite shortly.  No?  Fine.  Whatever.</p>

<p>I believed those professors and tour guides because 1) I figured that they knew what they were talking about, and 2) I’d seen it in books.  Everything in books is true, right? #bible.  Turns out tour_guides.liar_liar_pants_on_fire? returns true.</p>

<p>There is a YouTube channel called ‘Computerphile’ that puts out videos digging down into some of the minutiae of the history and inner workings of those magical thinking boxes that we all carry around.  Ever wonder about the discrete cosine transformation used to encode jpeg images or the significance of the Altair 8800? No?  Well if you did you could hear all about it from experts in the fields.  It, along with it’s sister channel ‘Numberphile’, are worth a look.</p>

<p>Anyway, back to the issue at hand… I ran across one of Computerphile’s vids this past Monday.  The topic: Colossus, the world’s first (at least partially) programmable electronic digital computer.  The prototype, Colossus Mk 1 was operational in December of 1943 and put into service February 5, 1944, preceding ENIAC (completed in November of 1945) by nearly two years.  Bonus points for having a way better name.</p>

<iframe width="760" height="488" src="https://www.youtube.com/embed/9HH-asvLAj4" frameborder="0" allowfullscreen></iframe>


<p>The Colossus was designed and built by engineer Tommy Flowers, assisted by William Chandler, with Sidney Broadhurst working on the auxiliary electromechanical parts at the Government Code and Cypher School (GC&amp;CS) in Bletchley Park in order to break the cryptography of the Lorenz SZ42 cipher machine used to encrypt messages transmitted by the German High Command and Army Commands.  Though the better known Enigma was more common (due to its greater portability), it was used more in the transmission of tactical information, while the Lorenz, a far more complex cipher, was used to securely transmit information of a more strategic nature; ‘securely’ at least until Colossus came along.</p>

<p>Colossus was the first example of program-controlled logic, parallel processing, variable programming, hardware interrupts, optical reading of punched paper tape, and shift registers, all concepts that would become critical in the future development of computing.</p>

<p>It is worth taking a moment to note how much more complex the challenge was facing Colossus in comparison to the challenge facing Turing’s ‘Victory' (not ‘Christoper’, sorry Cumberbatch) electromechanical computer.</p>

<p>Enigma:
3 rotors (Army and Air Force) or 4 rotors (Navy) with 26 settings each.  The three rotor version could be configured in:
158,962,555,217,826,360,000 different ways.  Thats 159 million million million.</p>

<p>Lorenz:
12 Rotors, each with a different number of possible settings.</p>

<p>Rotor Number => Possible settings.</p>

<p>{1=> 43, 2=> 47, 3=> 51, 4=> 53, 5=> 59, 6=> 37, 7=> 61, 8=> 41, 9=> 31, 10=> 29, 11=> 26, 12=> 23}
which combined to form:
104, 970,795,887,142, 501,519,944,408, 859,713,937,438, 238,568,341,584, 154,526,205,632, 598,745,732,639, 647,278,021,173, 163,831,071,764, 896,225,159,592, 365,198,842,461, 226,688,733,330, 753,486,243,770, 471,723,522,422, 795,262,754,816 different possible settings.</p>

<p>100 million million million million million million million million million million million million million million million million million million million million million million million million million million million million. POSSIBLE. SETTING.</p>

<p>In scientific notation thats written as 1.04 x 10<sup>shit-ton</sup>.</p>

<p>And to compare the two, the Lorenz could be set to: 660,349, 198,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000, 000,000,000,000 TIMES more combinations than the Enigma.</p>

<p>660,349 million million million million million million million million million million million million million million million million million million million million million million million million.  TIMES. MORE.</p>

<p> Yeeeeesh.</p>

<p>So why haven’t we heard of Colossus?  Well, it was highly classified through the late 1970’s, long after ENIAC had been revealed to the public in 1946 and hailed as the first electronic ‘Giant Brain’.  It’s hard to unseat a 30 year-old reputation.  Furthermore, Churchill ordered all but two of the 11 machines destroyed shortly after V-E Day in 1945.  The remaining machines were used for training and research purposes before being scrapped a number of years later.</p>

<p>As far as I can tell the only reason one might prefer ENIAC over Colossus is that it was the first example of a Turing complete machine, whatever that mean.  You’ll have to look that one up for yourself; it went a bit over my head.  Then again Professor Benjamin Wells of the Departments of Computer Science and Mathematics, University of San Francisco, has shown that a Universal Turing Machine could run on ten Colossus computers and argues that this means that Colossus satisfies the definition of Turing completeness. Soon, there’s that?</p>

<p>Sources-
This isn’t a scholarly work so I’m not going to go back and cite anything, but here are a few places that were helpful:</p>

<p><a href="http://billtuttememorial.org.uk/codebreaking/the-lorenz/">http://billtuttememorial.org.uk/codebreaking/the-lorenz/</a>
<a href="https://www.youtube.com/watch?v=9HH-asvLAj4">https://www.youtube.com/watch?v=9HH-asvLAj4</a>
<a href="http://www.wired.com/2007/09/dead-media-be-1-17/">http://www.wired.com/2007/09/dead-media-be-1-17/</a>
<a href="http://history-computer.com/ModernComputer/Electronic/Colossus.html">http://history-computer.com/ModernComputer/Electronic/Colossus.html</a>
<a href="http://cryptomuseum.com/crypto/colossus/index.htm">http://cryptomuseum.com/crypto/colossus/index.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Constants Are NOT Constant]]></title>
    <link href="http://mminute.github.io/blog/2015/06/04/my-first-post-on-octopress/"/>
    <updated>2015-06-04T21:34:41-04:00</updated>
    <id>http://mminute.github.io/blog/2015/06/04/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>The speed of light.</p>

<p>Avogadro&rsquo;s number.</p>

<p>Planck&rsquo;s constant.</p>

<p>The mass of an electron.</p>

<p>I thought that I understood constants.  Unchanging. Immutable.  Then Ruby went and fucked it up.</p>

<p>My understanding of constants in Ruby was that they are represented by a capitalized bareword (often all upper case) which, once defined, would cause Ruby to pitch a fit if you were to try to reassign its value.  Makes sense, right?  So when I saw this I was a bit confused:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Shoe
</span><span class='line'>  BRANDS = []
</span><span class='line'>
</span><span class='line'>  def initialize(brand)
</span><span class='line'>    @brand = brand
</span><span class='line'>    if BRANDS.include?(@brand) == false
</span><span class='line'>    BRANDS &lt;&lt; @brand
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Wait.. whaaaaaa????</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BRANDS &lt;&lt; @brand</span></code></pre></td></tr></table></div></figure>


<p>Aren&rsquo;t we changing what BRAND represents?
Yes and no.
We are NOT changing the object to which the bareword &ldquo;BRANDS&rdquo; points.
We ARE changing the contents of that array, or what I formerly thought of as the value for &ldquo;BRANDS&rdquo;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BRANDS = []
</span><span class='line'>BRANDS.object_id #=&gt; 70132206506080
</span><span class='line'>BRANDS &lt;&lt; "LA Gear"
</span><span class='line'>BRANDS &lt;&lt; "FILA"
</span><span class='line'>BRANDS #=&gt; ["LA Gear", "FILA"]
</span><span class='line'>BRANDS.object_id #=&gt; 70132206506080</span></code></pre></td></tr></table></div></figure>


<p>But, wait!  There&rsquo;s more!</p>

<p>So, while the value of PI might be the same in your home as it is in Intercourse, Pennsylvania,  Fucking, Austria,  and Wetwang, Yorkshire UK (all real places, btw), a constant may not be the same everywhere in your code.  Let&rsquo;s try this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PIE = ["mmmmmm","piiiiiiiieeeeeee"]
</span><span class='line'>
</span><span class='line'>class TastyStuff
</span><span class='line'>  PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; ["mmmmmm","piiiiiiiieeeeeee"]</span></code></pre></td></tr></table></div></figure>


<p>So now we have two &ldquo;PIE"s?
Hello Namespacing!  How&rsquo;re the wife and kids?!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PIE = ["mmmmmm","piiiiiiiieeeeeee"]
</span><span class='line'>
</span><span class='line'>class TastyStuff
</span><span class='line'>  PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; ["mmmmmm","piiiiiiiieeeeeee"]
</span><span class='line'>TastyStuff::PIE #=&gt; ["Pecan", "Apple", "Pumpkin"]</span></code></pre></td></tr></table></div></figure>


<p>What happens if we get rid of the &ldquo;PIE&rdquo; inside the class?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>class TastyStuff
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; ["Pecan", "Apple", "Pumpkin"]</span></code></pre></td></tr></table></div></figure>


<p>But if we reverse it&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class TastyStuff
</span><span class='line'>  PIE = ["Pecan", "Apple", "Pumpkin"]
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    if PIE.include?(name)
</span><span class='line'>      puts "Nom!"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>my_treat = TastyStuff.new("Pecan") #=&gt; "Nom!"
</span><span class='line'>
</span><span class='line'>PIE #=&gt; uninitialized constant PIE (NameError)</span></code></pre></td></tr></table></div></figure>


<p>Sooooooo&hellip; now we can&rsquo;t call &ldquo;PIE&rdquo; from outside of the class?   It only works from within the class?  I guess we could call it a &lsquo;Class Constant&rsquo;?  Yeah, let&rsquo;s call it a Class Constant because, well, that&rsquo;s what it&rsquo;s called.</p>

<hr />

<p>Let&rsquo;s summarize:</p>

<ul>
<li>Constants can only be set to point to an object once.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LYRICS = ["Nah Nah Nah Nah"]
</span><span class='line'>LYRICS = ["Hey Hey Hey, Goodbye"]
</span><span class='line'>#=&gt;2: warning: already initialized constant LYRICS
</span><span class='line'>#=&gt;1: warning: previous definition of LYRICS was here</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The object to which a constant points CAN be changed.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LYRICS = ["Nah Nah Nah Nah"]
</span><span class='line'>LYRICS &lt;&lt; "Hey Hey Hey, Goodbye"
</span><span class='line'>#=&gt; ["Nah Nah Nah Nah" , "Hey Hey Hey, Goodbye"]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Constants have a scope / are namespaced.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LYRICS = ["Nah Nah Nah Nah"]
</span><span class='line'>
</span><span class='line'>class Tunes
</span><span class='line'>  LYRICS = ["Hey Hey Hey, Goodbye"]
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>LYRICS #=&gt; ["Nah Nah Nah Nah"]
</span><span class='line'>Tunes::LYRICS #=&gt; ["Hey Hey Hey, Goodbye"]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
